2025-03-01 14:42:20,715:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:42:20,715:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:42:20,715:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:42:20,715:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:42:23,067:WARNING:D:\AstroGaurd\src\eda.py:28: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.countplot(x=df["Hazardous"], palette="viridis")

2025-03-01 14:43:32,841:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:43:32,841:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:43:32,841:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:43:32,841:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:43:33,607:WARNING:D:\AstroGaurd\src\eda.py:28: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.countplot(x=df["Hazardous"], palette="viridis")

2025-03-01 14:43:34,394:INFO:PyCaret ClassificationExperiment
2025-03-01 14:43:34,394:INFO:Logging name: clf-default-name
2025-03-01 14:43:34,394:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-03-01 14:43:34,395:INFO:version 3.3.2
2025-03-01 14:43:34,395:INFO:Initializing setup()
2025-03-01 14:43:34,395:INFO:self.USI: c981
2025-03-01 14:43:34,395:INFO:self._variable_keys: {'exp_name_log', 'fold_groups_param', 'y', 'fix_imbalance', 'X_test', 'y_test', 'data', 'target_param', '_ml_usecase', 'idx', 'exp_id', 'logging_param', '_available_plots', 'n_jobs_param', 'X', 'is_multiclass', 'html_param', 'y_train', 'log_plots_param', 'pipeline', 'gpu_n_jobs_param', 'USI', 'fold_shuffle_param', 'memory', 'fold_generator', 'seed', 'gpu_param', 'X_train'}
2025-03-01 14:43:34,395:INFO:Checking environment
2025-03-01 14:43:34,395:INFO:python_version: 3.11.7
2025-03-01 14:43:34,395:INFO:python_build: ('tags/v3.11.7:fa7a6f2', 'Dec  4 2023 19:24:49')
2025-03-01 14:43:34,395:INFO:machine: AMD64
2025-03-01 14:43:34,405:INFO:platform: Windows-10-10.0.22631-SP0
2025-03-01 14:43:34,413:INFO:Memory: svmem(total=16369410048, available=1976496128, percent=87.9, used=14392913920, free=1976496128)
2025-03-01 14:43:34,413:INFO:Physical Core: 8
2025-03-01 14:43:34,413:INFO:Logical Core: 16
2025-03-01 14:43:34,413:INFO:Checking libraries
2025-03-01 14:43:34,413:INFO:System:
2025-03-01 14:43:34,413:INFO:    python: 3.11.7 (tags/v3.11.7:fa7a6f2, Dec  4 2023, 19:24:49) [MSC v.1937 64 bit (AMD64)]
2025-03-01 14:43:34,413:INFO:executable: C:\Users\mfira\AppData\Local\Programs\Python\Python311\python.exe
2025-03-01 14:43:34,413:INFO:   machine: Windows-10-10.0.22631-SP0
2025-03-01 14:43:34,413:INFO:PyCaret required dependencies:
2025-03-01 14:43:34,535:INFO:                 pip: 25.0
2025-03-01 14:43:34,535:INFO:          setuptools: 75.6.0
2025-03-01 14:43:34,535:INFO:             pycaret: 3.3.2
2025-03-01 14:43:34,535:INFO:             IPython: 8.32.0
2025-03-01 14:43:34,535:INFO:          ipywidgets: 8.1.5
2025-03-01 14:43:34,535:INFO:                tqdm: 4.67.0
2025-03-01 14:43:34,536:INFO:               numpy: 1.26.4
2025-03-01 14:43:34,536:INFO:              pandas: 2.1.4
2025-03-01 14:43:34,536:INFO:              jinja2: 3.1.5
2025-03-01 14:43:34,536:INFO:               scipy: 1.11.4
2025-03-01 14:43:34,536:INFO:              joblib: 1.3.2
2025-03-01 14:43:34,536:INFO:             sklearn: 1.4.2
2025-03-01 14:43:34,536:INFO:                pyod: 2.0.3
2025-03-01 14:43:34,536:INFO:            imblearn: 0.13.0
2025-03-01 14:43:34,536:INFO:   category_encoders: 2.7.0
2025-03-01 14:43:34,536:INFO:            lightgbm: 4.6.0
2025-03-01 14:43:34,536:INFO:               numba: 0.61.0
2025-03-01 14:43:34,536:INFO:            requests: 2.32.3
2025-03-01 14:43:34,536:INFO:          matplotlib: 3.7.5
2025-03-01 14:43:34,536:INFO:          scikitplot: 0.3.7
2025-03-01 14:43:34,536:INFO:         yellowbrick: 1.5
2025-03-01 14:43:34,536:INFO:              plotly: 6.0.0
2025-03-01 14:43:34,536:INFO:    plotly-resampler: Not installed
2025-03-01 14:43:34,536:INFO:             kaleido: 0.2.1
2025-03-01 14:43:34,536:INFO:           schemdraw: 0.15
2025-03-01 14:43:34,536:INFO:         statsmodels: 0.14.4
2025-03-01 14:43:34,536:INFO:              sktime: 0.26.0
2025-03-01 14:43:34,536:INFO:               tbats: 1.1.3
2025-03-01 14:43:34,536:INFO:            pmdarima: 2.0.4
2025-03-01 14:43:34,536:INFO:              psutil: 6.1.1
2025-03-01 14:43:34,536:INFO:          markupsafe: 3.0.2
2025-03-01 14:43:34,536:INFO:             pickle5: Not installed
2025-03-01 14:43:34,536:INFO:         cloudpickle: 3.1.0
2025-03-01 14:43:34,536:INFO:         deprecation: 2.1.0
2025-03-01 14:43:34,536:INFO:              xxhash: 3.5.0
2025-03-01 14:43:34,536:INFO:           wurlitzer: Not installed
2025-03-01 14:43:34,536:INFO:PyCaret optional dependencies:
2025-03-01 14:43:34,548:INFO:                shap: Not installed
2025-03-01 14:43:34,548:INFO:           interpret: Not installed
2025-03-01 14:43:34,548:INFO:                umap: Not installed
2025-03-01 14:43:34,548:INFO:     ydata_profiling: Not installed
2025-03-01 14:43:34,548:INFO:  explainerdashboard: Not installed
2025-03-01 14:43:34,548:INFO:             autoviz: Not installed
2025-03-01 14:43:34,548:INFO:           fairlearn: Not installed
2025-03-01 14:43:34,548:INFO:          deepchecks: Not installed
2025-03-01 14:43:34,548:INFO:             xgboost: Not installed
2025-03-01 14:43:34,548:INFO:            catboost: Not installed
2025-03-01 14:43:34,548:INFO:              kmodes: Not installed
2025-03-01 14:43:34,548:INFO:             mlxtend: Not installed
2025-03-01 14:43:34,548:INFO:       statsforecast: Not installed
2025-03-01 14:43:34,548:INFO:        tune_sklearn: Not installed
2025-03-01 14:43:34,548:INFO:                 ray: Not installed
2025-03-01 14:43:34,548:INFO:            hyperopt: Not installed
2025-03-01 14:43:34,548:INFO:              optuna: Not installed
2025-03-01 14:43:34,548:INFO:               skopt: Not installed
2025-03-01 14:43:34,548:INFO:              mlflow: Not installed
2025-03-01 14:43:34,548:INFO:              gradio: Not installed
2025-03-01 14:43:34,548:INFO:             fastapi: Not installed
2025-03-01 14:43:34,548:INFO:             uvicorn: Not installed
2025-03-01 14:43:34,548:INFO:              m2cgen: Not installed
2025-03-01 14:43:34,548:INFO:           evidently: Not installed
2025-03-01 14:43:34,548:INFO:               fugue: Not installed
2025-03-01 14:43:34,548:INFO:           streamlit: 1.42.0
2025-03-01 14:43:34,548:INFO:             prophet: 1.1.6
2025-03-01 14:43:34,548:INFO:None
2025-03-01 14:43:34,548:INFO:Set up data.
2025-03-01 14:43:34,555:INFO:Set up folding strategy.
2025-03-01 14:43:34,555:INFO:Set up train/test split.
2025-03-01 14:43:34,558:INFO:Set up index.
2025-03-01 14:43:34,558:INFO:Assigning column types.
2025-03-01 14:43:34,558:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-03-01 14:43:34,587:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-01 14:43:34,595:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-01 14:43:34,618:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:43:34,618:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:43:34,647:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-01 14:43:34,647:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-01 14:43:34,668:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:43:34,668:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:43:34,668:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-03-01 14:43:34,697:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-01 14:43:34,715:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:43:34,715:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:43:34,748:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-01 14:43:34,766:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:43:34,766:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:43:34,766:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-03-01 14:43:34,816:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:43:34,817:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:43:34,866:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:43:34,866:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:43:34,868:INFO:Preparing preprocessing pipeline...
2025-03-01 14:43:34,868:INFO:Set up label encoding.
2025-03-01 14:43:34,868:INFO:Set up simple imputation.
2025-03-01 14:43:34,868:INFO:Set up feature normalization.
2025-03-01 14:43:34,868:INFO:Set up column name cleaning.
2025-03-01 14:43:34,897:INFO:Finished creating preprocessing pipeline.
2025-03-01 14:43:34,897:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\mfira\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Absolute Magnitude',
                                             'Est Dia in KM(min)',
                                             'Est Dia in KM(max)',
                                             'Relative Velocity km per sec',
                                             'Miss Dist.(Astron...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-03-01 14:43:34,897:INFO:Creating final display dataframe.
2025-03-01 14:43:34,976:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target         Hazardous
2                   Target type            Binary
3                Target mapping        0: 0, 2: 1
4           Original data shape        (4687, 22)
5        Transformed data shape        (4687, 22)
6   Transformed train set shape        (3280, 22)
7    Transformed test set shape        (1407, 22)
8              Numeric features                21
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13                    Normalize              True
14             Normalize method            zscore
15               Fold Generator   StratifiedKFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  clf-default-name
21                          USI              c981
2025-03-01 14:43:35,029:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:43:35,029:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:43:35,077:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:43:35,077:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:43:35,079:INFO:setup() successfully completed in 0.69s...............
2025-03-01 14:43:35,079:INFO:Initializing compare_models()
2025-03-01 14:43:35,079:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BC858CEC50>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001BC858CEC50>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-03-01 14:43:35,079:INFO:Checking exceptions
2025-03-01 14:43:35,079:INFO:Preparing display monitor
2025-03-01 14:43:35,087:INFO:Initializing Logistic Regression
2025-03-01 14:43:35,087:INFO:Total runtime is 0.0 minutes
2025-03-01 14:43:35,087:INFO:SubProcess create_model() called ==================================
2025-03-01 14:43:35,087:INFO:Initializing create_model()
2025-03-01 14:43:35,087:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BC858CEC50>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BC85FD4C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:43:35,087:INFO:Checking exceptions
2025-03-01 14:43:35,087:INFO:Importing libraries
2025-03-01 14:43:35,087:INFO:Copying training dataset
2025-03-01 14:43:35,089:INFO:Defining folds
2025-03-01 14:43:35,089:INFO:Declaring metric variables
2025-03-01 14:43:35,089:INFO:Importing untrained model
2025-03-01 14:43:35,089:INFO:Logistic Regression Imported successfully
2025-03-01 14:43:35,089:INFO:Starting cross validation
2025-03-01 14:43:35,093:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:43:39,399:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,399:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,399:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,399:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,399:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,399:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,405:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,405:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,405:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,405:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,406:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,407:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,407:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,407:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,407:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,407:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,411:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,415:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,417:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,435:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,440:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,443:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,443:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,446:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,446:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,452:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,452:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,456:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,471:INFO:Calculating mean and std
2025-03-01 14:43:39,471:INFO:Creating metrics dataframe
2025-03-01 14:43:39,475:INFO:Uploading results into container
2025-03-01 14:43:39,475:INFO:Uploading model into container now
2025-03-01 14:43:39,475:INFO:_master_model_container: 1
2025-03-01 14:43:39,475:INFO:_display_container: 2
2025-03-01 14:43:39,479:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-01 14:43:39,479:INFO:create_model() successfully completed......................................
2025-03-01 14:43:39,608:INFO:SubProcess create_model() end ==================================
2025-03-01 14:43:39,608:INFO:Creating metrics dataframe
2025-03-01 14:43:39,611:INFO:Initializing K Neighbors Classifier
2025-03-01 14:43:39,611:INFO:Total runtime is 0.07539634704589844 minutes
2025-03-01 14:43:39,611:INFO:SubProcess create_model() called ==================================
2025-03-01 14:43:39,611:INFO:Initializing create_model()
2025-03-01 14:43:39,611:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BC858CEC50>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BC85FD4C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:43:39,611:INFO:Checking exceptions
2025-03-01 14:43:39,611:INFO:Importing libraries
2025-03-01 14:43:39,611:INFO:Copying training dataset
2025-03-01 14:43:39,616:INFO:Defining folds
2025-03-01 14:43:39,616:INFO:Declaring metric variables
2025-03-01 14:43:39,616:INFO:Importing untrained model
2025-03-01 14:43:39,616:INFO:K Neighbors Classifier Imported successfully
2025-03-01 14:43:39,616:INFO:Starting cross validation
2025-03-01 14:43:39,616:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:43:39,702:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,705:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,706:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,711:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,713:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,713:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,713:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,716:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,717:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,717:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,717:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:39,717:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,375:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,379:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,379:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,381:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,381:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,381:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,383:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,383:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,384:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,384:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,385:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,385:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,385:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,386:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,388:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,388:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,388:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,388:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,405:INFO:Calculating mean and std
2025-03-01 14:43:43,406:INFO:Creating metrics dataframe
2025-03-01 14:43:43,408:INFO:Uploading results into container
2025-03-01 14:43:43,408:INFO:Uploading model into container now
2025-03-01 14:43:43,412:INFO:_master_model_container: 2
2025-03-01 14:43:43,412:INFO:_display_container: 2
2025-03-01 14:43:43,412:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-03-01 14:43:43,412:INFO:create_model() successfully completed......................................
2025-03-01 14:43:43,510:INFO:SubProcess create_model() end ==================================
2025-03-01 14:43:43,510:INFO:Creating metrics dataframe
2025-03-01 14:43:43,513:INFO:Initializing Naive Bayes
2025-03-01 14:43:43,514:INFO:Total runtime is 0.14044904311498008 minutes
2025-03-01 14:43:43,514:INFO:SubProcess create_model() called ==================================
2025-03-01 14:43:43,514:INFO:Initializing create_model()
2025-03-01 14:43:43,514:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BC858CEC50>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BC85FD4C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:43:43,514:INFO:Checking exceptions
2025-03-01 14:43:43,514:INFO:Importing libraries
2025-03-01 14:43:43,514:INFO:Copying training dataset
2025-03-01 14:43:43,518:INFO:Defining folds
2025-03-01 14:43:43,518:INFO:Declaring metric variables
2025-03-01 14:43:43,518:INFO:Importing untrained model
2025-03-01 14:43:43,519:INFO:Naive Bayes Imported successfully
2025-03-01 14:43:43,519:INFO:Starting cross validation
2025-03-01 14:43:43,519:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:43:43,567:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,568:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,569:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,570:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,570:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,571:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,571:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,572:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,572:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,572:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,573:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,573:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,574:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,574:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,577:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,577:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,577:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,579:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,579:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,579:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,579:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,579:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,579:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,579:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,579:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,579:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,585:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,585:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,586:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,586:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,600:INFO:Calculating mean and std
2025-03-01 14:43:43,600:INFO:Creating metrics dataframe
2025-03-01 14:43:43,600:INFO:Uploading results into container
2025-03-01 14:43:43,600:INFO:Uploading model into container now
2025-03-01 14:43:43,600:INFO:_master_model_container: 3
2025-03-01 14:43:43,600:INFO:_display_container: 2
2025-03-01 14:43:43,600:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-03-01 14:43:43,600:INFO:create_model() successfully completed......................................
2025-03-01 14:43:43,667:INFO:SubProcess create_model() end ==================================
2025-03-01 14:43:43,667:INFO:Creating metrics dataframe
2025-03-01 14:43:43,672:INFO:Initializing Decision Tree Classifier
2025-03-01 14:43:43,672:INFO:Total runtime is 0.14308951695760092 minutes
2025-03-01 14:43:43,674:INFO:SubProcess create_model() called ==================================
2025-03-01 14:43:43,674:INFO:Initializing create_model()
2025-03-01 14:43:43,674:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BC858CEC50>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BC85FD4C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:43:43,674:INFO:Checking exceptions
2025-03-01 14:43:43,674:INFO:Importing libraries
2025-03-01 14:43:43,674:INFO:Copying training dataset
2025-03-01 14:43:43,678:INFO:Defining folds
2025-03-01 14:43:43,678:INFO:Declaring metric variables
2025-03-01 14:43:43,678:INFO:Importing untrained model
2025-03-01 14:43:43,678:INFO:Decision Tree Classifier Imported successfully
2025-03-01 14:43:43,678:INFO:Starting cross validation
2025-03-01 14:43:43,679:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:43:43,732:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,732:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,733:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,733:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,733:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,735:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,736:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,737:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,737:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,739:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,740:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,740:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,743:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,743:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,744:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,745:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,746:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,746:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,746:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,747:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,748:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,749:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,749:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,750:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,750:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,753:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,755:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,768:INFO:Calculating mean and std
2025-03-01 14:43:43,769:INFO:Creating metrics dataframe
2025-03-01 14:43:43,769:INFO:Uploading results into container
2025-03-01 14:43:43,769:INFO:Uploading model into container now
2025-03-01 14:43:43,769:INFO:_master_model_container: 4
2025-03-01 14:43:43,769:INFO:_display_container: 2
2025-03-01 14:43:43,769:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best')
2025-03-01 14:43:43,769:INFO:create_model() successfully completed......................................
2025-03-01 14:43:43,853:INFO:SubProcess create_model() end ==================================
2025-03-01 14:43:43,853:INFO:Creating metrics dataframe
2025-03-01 14:43:43,855:INFO:Initializing SVM - Linear Kernel
2025-03-01 14:43:43,855:INFO:Total runtime is 0.14613809982935588 minutes
2025-03-01 14:43:43,855:INFO:SubProcess create_model() called ==================================
2025-03-01 14:43:43,855:INFO:Initializing create_model()
2025-03-01 14:43:43,855:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BC858CEC50>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BC85FD4C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:43:43,856:INFO:Checking exceptions
2025-03-01 14:43:43,856:INFO:Importing libraries
2025-03-01 14:43:43,856:INFO:Copying training dataset
2025-03-01 14:43:43,860:INFO:Defining folds
2025-03-01 14:43:43,862:INFO:Declaring metric variables
2025-03-01 14:43:43,862:INFO:Importing untrained model
2025-03-01 14:43:43,862:INFO:SVM - Linear Kernel Imported successfully
2025-03-01 14:43:43,862:INFO:Starting cross validation
2025-03-01 14:43:43,862:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:43:43,918:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,919:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,921:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,921:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,921:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,924:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,924:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,924:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,925:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,925:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,925:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,925:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,930:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,930:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,930:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,930:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,930:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,930:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,933:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,933:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,933:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,935:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,936:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,936:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,936:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:43,943:INFO:Calculating mean and std
2025-03-01 14:43:43,943:INFO:Creating metrics dataframe
2025-03-01 14:43:43,945:INFO:Uploading results into container
2025-03-01 14:43:43,945:INFO:Uploading model into container now
2025-03-01 14:43:43,945:INFO:_master_model_container: 5
2025-03-01 14:43:43,946:INFO:_display_container: 2
2025-03-01 14:43:43,946:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-03-01 14:43:43,946:INFO:create_model() successfully completed......................................
2025-03-01 14:43:44,019:INFO:SubProcess create_model() end ==================================
2025-03-01 14:43:44,019:INFO:Creating metrics dataframe
2025-03-01 14:43:44,019:INFO:Initializing Ridge Classifier
2025-03-01 14:43:44,025:INFO:Total runtime is 0.14886147181193035 minutes
2025-03-01 14:43:44,025:INFO:SubProcess create_model() called ==================================
2025-03-01 14:43:44,025:INFO:Initializing create_model()
2025-03-01 14:43:44,025:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BC858CEC50>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BC85FD4C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:43:44,025:INFO:Checking exceptions
2025-03-01 14:43:44,025:INFO:Importing libraries
2025-03-01 14:43:44,025:INFO:Copying training dataset
2025-03-01 14:43:44,027:INFO:Defining folds
2025-03-01 14:43:44,027:INFO:Declaring metric variables
2025-03-01 14:43:44,027:INFO:Importing untrained model
2025-03-01 14:43:44,027:INFO:Ridge Classifier Imported successfully
2025-03-01 14:43:44,027:INFO:Starting cross validation
2025-03-01 14:43:44,027:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:43:44,089:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,089:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,090:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,090:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,091:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,091:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,091:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,091:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,091:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,091:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,092:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,092:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,093:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,093:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,093:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,093:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,095:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,095:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,095:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,096:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,096:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,097:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,097:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,097:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,097:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,101:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,111:INFO:Calculating mean and std
2025-03-01 14:43:44,112:INFO:Creating metrics dataframe
2025-03-01 14:43:44,113:INFO:Uploading results into container
2025-03-01 14:43:44,113:INFO:Uploading model into container now
2025-03-01 14:43:44,113:INFO:_master_model_container: 6
2025-03-01 14:43:44,113:INFO:_display_container: 2
2025-03-01 14:43:44,113:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2025-03-01 14:43:44,113:INFO:create_model() successfully completed......................................
2025-03-01 14:43:44,189:INFO:SubProcess create_model() end ==================================
2025-03-01 14:43:44,189:INFO:Creating metrics dataframe
2025-03-01 14:43:44,191:INFO:Initializing Random Forest Classifier
2025-03-01 14:43:44,191:INFO:Total runtime is 0.15173644224802654 minutes
2025-03-01 14:43:44,191:INFO:SubProcess create_model() called ==================================
2025-03-01 14:43:44,191:INFO:Initializing create_model()
2025-03-01 14:43:44,191:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BC858CEC50>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BC85FD4C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:43:44,191:INFO:Checking exceptions
2025-03-01 14:43:44,191:INFO:Importing libraries
2025-03-01 14:43:44,191:INFO:Copying training dataset
2025-03-01 14:43:44,196:INFO:Defining folds
2025-03-01 14:43:44,196:INFO:Declaring metric variables
2025-03-01 14:43:44,196:INFO:Importing untrained model
2025-03-01 14:43:44,196:INFO:Random Forest Classifier Imported successfully
2025-03-01 14:43:44,197:INFO:Starting cross validation
2025-03-01 14:43:44,197:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:43:44,629:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,630:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,633:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,637:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,637:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,637:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,640:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,640:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,640:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,642:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,642:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,642:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,643:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,643:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,643:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,643:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,643:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,643:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,643:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,645:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,645:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,645:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,646:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,652:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,654:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,655:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,656:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,656:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,656:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,665:INFO:Calculating mean and std
2025-03-01 14:43:44,666:INFO:Creating metrics dataframe
2025-03-01 14:43:44,667:INFO:Uploading results into container
2025-03-01 14:43:44,667:INFO:Uploading model into container now
2025-03-01 14:43:44,667:INFO:_master_model_container: 7
2025-03-01 14:43:44,667:INFO:_display_container: 2
2025-03-01 14:43:44,667:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-03-01 14:43:44,667:INFO:create_model() successfully completed......................................
2025-03-01 14:43:44,741:INFO:SubProcess create_model() end ==================================
2025-03-01 14:43:44,742:INFO:Creating metrics dataframe
2025-03-01 14:43:44,744:INFO:Initializing Quadratic Discriminant Analysis
2025-03-01 14:43:44,744:INFO:Total runtime is 0.16095219453175863 minutes
2025-03-01 14:43:44,744:INFO:SubProcess create_model() called ==================================
2025-03-01 14:43:44,744:INFO:Initializing create_model()
2025-03-01 14:43:44,744:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BC858CEC50>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BC85FD4C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:43:44,744:INFO:Checking exceptions
2025-03-01 14:43:44,744:INFO:Importing libraries
2025-03-01 14:43:44,744:INFO:Copying training dataset
2025-03-01 14:43:44,750:INFO:Defining folds
2025-03-01 14:43:44,750:INFO:Declaring metric variables
2025-03-01 14:43:44,750:INFO:Importing untrained model
2025-03-01 14:43:44,750:INFO:Quadratic Discriminant Analysis Imported successfully
2025-03-01 14:43:44,750:INFO:Starting cross validation
2025-03-01 14:43:44,751:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:43:44,797:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:43:44,797:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:43:44,797:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:43:44,797:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:43:44,797:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:43:44,800:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:43:44,800:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:43:44,800:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:43:44,810:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,810:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,810:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,810:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,810:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,810:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:43:44,814:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,814:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,814:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,814:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,814:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,814:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,814:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,815:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,815:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,816:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,816:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,816:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,817:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,817:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,817:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,817:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:43:44,817:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,817:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,817:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,817:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,820:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:43:44,820:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,820:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:44,831:INFO:Calculating mean and std
2025-03-01 14:43:44,831:INFO:Creating metrics dataframe
2025-03-01 14:43:44,831:INFO:Uploading results into container
2025-03-01 14:43:44,831:INFO:Uploading model into container now
2025-03-01 14:43:44,831:INFO:_master_model_container: 8
2025-03-01 14:43:44,831:INFO:_display_container: 2
2025-03-01 14:43:44,831:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-03-01 14:43:44,831:INFO:create_model() successfully completed......................................
2025-03-01 14:43:44,908:INFO:SubProcess create_model() end ==================================
2025-03-01 14:43:44,908:INFO:Creating metrics dataframe
2025-03-01 14:43:44,908:INFO:Initializing Ada Boost Classifier
2025-03-01 14:43:44,908:INFO:Total runtime is 0.1636776328086853 minutes
2025-03-01 14:43:44,908:INFO:SubProcess create_model() called ==================================
2025-03-01 14:43:44,908:INFO:Initializing create_model()
2025-03-01 14:43:44,908:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BC858CEC50>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BC85FD4C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:43:44,908:INFO:Checking exceptions
2025-03-01 14:43:44,908:INFO:Importing libraries
2025-03-01 14:43:44,908:INFO:Copying training dataset
2025-03-01 14:43:44,914:INFO:Defining folds
2025-03-01 14:43:44,914:INFO:Declaring metric variables
2025-03-01 14:43:44,914:INFO:Importing untrained model
2025-03-01 14:43:44,914:INFO:Ada Boost Classifier Imported successfully
2025-03-01 14:43:44,914:INFO:Starting cross validation
2025-03-01 14:43:44,915:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:43:44,946:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:43:44,947:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:43:44,947:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:43:44,947:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:43:44,954:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:43:44,957:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:43:44,957:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:43:44,957:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:43:44,966:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:43:45,315:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,315:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,320:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,320:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,327:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,327:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,336:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,336:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,336:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,341:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,347:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,347:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,347:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,347:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,347:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,347:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,347:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,356:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,357:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,357:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,357:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,357:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,357:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,357:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,357:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,357:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,365:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,365:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,366:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,366:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:45,376:INFO:Calculating mean and std
2025-03-01 14:43:45,377:INFO:Creating metrics dataframe
2025-03-01 14:43:45,378:INFO:Uploading results into container
2025-03-01 14:43:45,378:INFO:Uploading model into container now
2025-03-01 14:43:45,378:INFO:_master_model_container: 9
2025-03-01 14:43:45,378:INFO:_display_container: 2
2025-03-01 14:43:45,378:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42)
2025-03-01 14:43:45,378:INFO:create_model() successfully completed......................................
2025-03-01 14:43:45,450:INFO:SubProcess create_model() end ==================================
2025-03-01 14:43:45,450:INFO:Creating metrics dataframe
2025-03-01 14:43:45,450:INFO:Initializing Gradient Boosting Classifier
2025-03-01 14:43:45,450:INFO:Total runtime is 0.17272329330444336 minutes
2025-03-01 14:43:45,450:INFO:SubProcess create_model() called ==================================
2025-03-01 14:43:45,450:INFO:Initializing create_model()
2025-03-01 14:43:45,450:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BC858CEC50>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BC85FD4C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:43:45,450:INFO:Checking exceptions
2025-03-01 14:43:45,450:INFO:Importing libraries
2025-03-01 14:43:45,450:INFO:Copying training dataset
2025-03-01 14:43:45,457:INFO:Defining folds
2025-03-01 14:43:45,457:INFO:Declaring metric variables
2025-03-01 14:43:45,457:INFO:Importing untrained model
2025-03-01 14:43:45,457:INFO:Gradient Boosting Classifier Imported successfully
2025-03-01 14:43:45,457:INFO:Starting cross validation
2025-03-01 14:43:45,457:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:43:46,937:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,939:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,939:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,941:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,941:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,941:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,941:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,943:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,943:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,945:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,946:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,947:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,957:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,957:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,957:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,957:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,966:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,966:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,967:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,967:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,967:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,970:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,970:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,976:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,977:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,985:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,986:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,986:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,987:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,987:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:46,998:INFO:Calculating mean and std
2025-03-01 14:43:46,998:INFO:Creating metrics dataframe
2025-03-01 14:43:46,998:INFO:Uploading results into container
2025-03-01 14:43:46,998:INFO:Uploading model into container now
2025-03-01 14:43:46,998:INFO:_master_model_container: 10
2025-03-01 14:43:46,998:INFO:_display_container: 2
2025-03-01 14:43:46,998:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-03-01 14:43:46,998:INFO:create_model() successfully completed......................................
2025-03-01 14:43:47,076:INFO:SubProcess create_model() end ==================================
2025-03-01 14:43:47,076:INFO:Creating metrics dataframe
2025-03-01 14:43:47,078:INFO:Initializing Linear Discriminant Analysis
2025-03-01 14:43:47,078:INFO:Total runtime is 0.1998459060986837 minutes
2025-03-01 14:43:47,078:INFO:SubProcess create_model() called ==================================
2025-03-01 14:43:47,078:INFO:Initializing create_model()
2025-03-01 14:43:47,078:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BC858CEC50>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BC85FD4C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:43:47,078:INFO:Checking exceptions
2025-03-01 14:43:47,078:INFO:Importing libraries
2025-03-01 14:43:47,078:INFO:Copying training dataset
2025-03-01 14:43:47,079:INFO:Defining folds
2025-03-01 14:43:47,079:INFO:Declaring metric variables
2025-03-01 14:43:47,079:INFO:Importing untrained model
2025-03-01 14:43:47,079:INFO:Linear Discriminant Analysis Imported successfully
2025-03-01 14:43:47,079:INFO:Starting cross validation
2025-03-01 14:43:47,079:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:43:47,136:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,136:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,136:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,136:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,136:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,136:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,136:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,136:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,136:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,140:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,140:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,140:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,140:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,140:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,140:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,140:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,141:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,142:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,143:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,143:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,145:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,146:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,146:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,146:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,146:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,146:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,146:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,163:INFO:Calculating mean and std
2025-03-01 14:43:47,163:INFO:Creating metrics dataframe
2025-03-01 14:43:47,165:INFO:Uploading results into container
2025-03-01 14:43:47,165:INFO:Uploading model into container now
2025-03-01 14:43:47,165:INFO:_master_model_container: 11
2025-03-01 14:43:47,165:INFO:_display_container: 2
2025-03-01 14:43:47,166:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-03-01 14:43:47,166:INFO:create_model() successfully completed......................................
2025-03-01 14:43:47,241:INFO:SubProcess create_model() end ==================================
2025-03-01 14:43:47,241:INFO:Creating metrics dataframe
2025-03-01 14:43:47,242:INFO:Initializing Extra Trees Classifier
2025-03-01 14:43:47,242:INFO:Total runtime is 0.20258723894755046 minutes
2025-03-01 14:43:47,243:INFO:SubProcess create_model() called ==================================
2025-03-01 14:43:47,243:INFO:Initializing create_model()
2025-03-01 14:43:47,243:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BC858CEC50>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BC85FD4C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:43:47,243:INFO:Checking exceptions
2025-03-01 14:43:47,243:INFO:Importing libraries
2025-03-01 14:43:47,243:INFO:Copying training dataset
2025-03-01 14:43:47,246:INFO:Defining folds
2025-03-01 14:43:47,246:INFO:Declaring metric variables
2025-03-01 14:43:47,246:INFO:Importing untrained model
2025-03-01 14:43:47,246:INFO:Extra Trees Classifier Imported successfully
2025-03-01 14:43:47,246:INFO:Starting cross validation
2025-03-01 14:43:47,249:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:43:47,537:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,537:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,541:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,541:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,545:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,545:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,546:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,548:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,550:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,557:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,558:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,558:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,560:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,561:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,563:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,566:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,567:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,570:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,570:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,574:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,575:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,575:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,577:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,588:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,588:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,588:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,588:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,588:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,588:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:47,607:INFO:Calculating mean and std
2025-03-01 14:43:47,607:INFO:Creating metrics dataframe
2025-03-01 14:43:47,607:INFO:Uploading results into container
2025-03-01 14:43:47,607:INFO:Uploading model into container now
2025-03-01 14:43:47,607:INFO:_master_model_container: 12
2025-03-01 14:43:47,607:INFO:_display_container: 2
2025-03-01 14:43:47,607:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False)
2025-03-01 14:43:47,607:INFO:create_model() successfully completed......................................
2025-03-01 14:43:47,682:INFO:SubProcess create_model() end ==================================
2025-03-01 14:43:47,682:INFO:Creating metrics dataframe
2025-03-01 14:43:47,685:INFO:Initializing Light Gradient Boosting Machine
2025-03-01 14:43:47,685:INFO:Total runtime is 0.20995898246765138 minutes
2025-03-01 14:43:47,685:INFO:SubProcess create_model() called ==================================
2025-03-01 14:43:47,685:INFO:Initializing create_model()
2025-03-01 14:43:47,685:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BC858CEC50>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BC85FD4C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:43:47,685:INFO:Checking exceptions
2025-03-01 14:43:47,685:INFO:Importing libraries
2025-03-01 14:43:47,685:INFO:Copying training dataset
2025-03-01 14:43:47,688:INFO:Defining folds
2025-03-01 14:43:47,688:INFO:Declaring metric variables
2025-03-01 14:43:47,688:INFO:Importing untrained model
2025-03-01 14:43:47,688:INFO:Light Gradient Boosting Machine Imported successfully
2025-03-01 14:43:47,688:INFO:Starting cross validation
2025-03-01 14:43:47,688:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:43:48,510:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,514:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,518:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,530:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,535:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,536:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,540:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,540:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,540:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,546:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,546:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,549:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,576:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,577:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,583:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,585:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,585:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,585:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,590:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,591:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,597:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,615:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,617:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,621:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,635:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,636:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,639:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,639:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,642:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,642:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,652:INFO:Calculating mean and std
2025-03-01 14:43:48,652:INFO:Creating metrics dataframe
2025-03-01 14:43:48,655:INFO:Uploading results into container
2025-03-01 14:43:48,655:INFO:Uploading model into container now
2025-03-01 14:43:48,655:INFO:_master_model_container: 13
2025-03-01 14:43:48,655:INFO:_display_container: 2
2025-03-01 14:43:48,657:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-03-01 14:43:48,657:INFO:create_model() successfully completed......................................
2025-03-01 14:43:48,760:INFO:SubProcess create_model() end ==================================
2025-03-01 14:43:48,760:INFO:Creating metrics dataframe
2025-03-01 14:43:48,766:INFO:Initializing Dummy Classifier
2025-03-01 14:43:48,766:INFO:Total runtime is 0.2279862960179647 minutes
2025-03-01 14:43:48,767:INFO:SubProcess create_model() called ==================================
2025-03-01 14:43:48,767:INFO:Initializing create_model()
2025-03-01 14:43:48,767:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BC858CEC50>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BC85FD4C10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:43:48,767:INFO:Checking exceptions
2025-03-01 14:43:48,767:INFO:Importing libraries
2025-03-01 14:43:48,767:INFO:Copying training dataset
2025-03-01 14:43:48,774:INFO:Defining folds
2025-03-01 14:43:48,774:INFO:Declaring metric variables
2025-03-01 14:43:48,774:INFO:Importing untrained model
2025-03-01 14:43:48,774:INFO:Dummy Classifier Imported successfully
2025-03-01 14:43:48,774:INFO:Starting cross validation
2025-03-01 14:43:48,775:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:43:48,825:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,827:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,827:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,827:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,827:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,827:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:43:48,833:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,834:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:43:48,835:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,835:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,836:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,836:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,836:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:43:48,836:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:43:48,839:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,840:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,840:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,840:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,843:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,843:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,843:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:43:48,843:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,843:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:43:48,845:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,845:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,845:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,846:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:43:48,846:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,846:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,847:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:43:48,847:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,847:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,847:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,847:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:43:48,851:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,851:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,851:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:43:48,851:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 2) is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-03-01 14:43:48,866:INFO:Calculating mean and std
2025-03-01 14:43:48,867:INFO:Creating metrics dataframe
2025-03-01 14:43:48,867:INFO:Uploading results into container
2025-03-01 14:43:48,867:INFO:Uploading model into container now
2025-03-01 14:43:48,869:INFO:_master_model_container: 14
2025-03-01 14:43:48,869:INFO:_display_container: 2
2025-03-01 14:43:48,869:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2025-03-01 14:43:48,869:INFO:create_model() successfully completed......................................
2025-03-01 14:43:48,950:INFO:SubProcess create_model() end ==================================
2025-03-01 14:43:48,950:INFO:Creating metrics dataframe
2025-03-01 14:43:48,955:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:339: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  .applymap(highlight_cols, subset=["TT (Sec)"])

2025-03-01 14:43:48,956:INFO:Initializing create_model()
2025-03-01 14:43:48,956:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001BC858CEC50>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:43:48,956:INFO:Checking exceptions
2025-03-01 14:43:48,956:INFO:Importing libraries
2025-03-01 14:43:48,956:INFO:Copying training dataset
2025-03-01 14:43:48,962:INFO:Defining folds
2025-03-01 14:43:48,962:INFO:Declaring metric variables
2025-03-01 14:43:48,962:INFO:Importing untrained model
2025-03-01 14:43:48,962:INFO:Declaring custom model
2025-03-01 14:43:48,965:INFO:Light Gradient Boosting Machine Imported successfully
2025-03-01 14:43:48,965:INFO:Cross validation set to False
2025-03-01 14:43:48,965:INFO:Fitting Model
2025-03-01 14:43:48,981:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-03-01 14:43:48,981:INFO:[LightGBM] [Info] Number of positive: 528, number of negative: 2752
2025-03-01 14:43:48,981:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000463 seconds.
2025-03-01 14:43:48,981:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-03-01 14:43:48,981:INFO:[LightGBM] [Info] Total Bins 4338
2025-03-01 14:43:48,984:INFO:[LightGBM] [Info] Number of data points in the train set: 3280, number of used features: 20
2025-03-01 14:43:48,984:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.160976 -> initscore=-1.650987
2025-03-01 14:43:48,985:INFO:[LightGBM] [Info] Start training from score -1.650987
2025-03-01 14:43:48,985:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,985:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,986:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,986:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,986:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,986:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,986:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,986:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,986:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,986:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,986:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,986:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,986:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,986:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,986:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,990:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,991:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,991:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,991:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,991:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:48,991:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:43:49,033:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-03-01 14:43:49,035:INFO:create_model() successfully completed......................................
2025-03-01 14:43:49,130:INFO:_master_model_container: 14
2025-03-01 14:43:49,130:INFO:_display_container: 2
2025-03-01 14:43:49,130:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-03-01 14:43:49,130:INFO:compare_models() successfully completed......................................
2025-03-01 14:43:49,138:INFO:Initializing save_model()
2025-03-01 14:43:49,138:INFO:save_model(model=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), model_name=models//best_pycaret_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\mfira\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Absolute Magnitude',
                                             'Est Dia in KM(min)',
                                             'Est Dia in KM(max)',
                                             'Relative Velocity km per sec',
                                             'Miss Dist.(Astron...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-03-01 14:43:49,138:INFO:Adding model into prep_pipe
2025-03-01 14:43:49,145:INFO:models//best_pycaret_model.pkl saved in current working directory
2025-03-01 14:43:49,149:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Absolute Magnitude',
                                             'Est Dia in KM(min)',
                                             'Est Dia in KM(max)',
                                             'Relative Velocity km per sec',
                                             'Miss Dist.(Astronomical)',
                                             'Orbiting Body',
                                             'Orbit Uncertaini...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=42,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-03-01 14:43:49,149:INFO:save_model() successfully completed......................................
2025-03-01 14:45:55,626:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:45:55,626:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:45:55,626:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:45:55,626:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:45:58,805:WARNING:D:\AstroGaurd\src\eda.py:28: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.countplot(x=df["Hazardous"], palette="viridis")

2025-03-01 14:45:59,787:INFO:PyCaret ClassificationExperiment
2025-03-01 14:45:59,787:INFO:Logging name: clf-default-name
2025-03-01 14:45:59,787:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-03-01 14:45:59,787:INFO:version 3.3.2
2025-03-01 14:45:59,787:INFO:Initializing setup()
2025-03-01 14:45:59,787:INFO:self.USI: d112
2025-03-01 14:45:59,787:INFO:self._variable_keys: {'idx', '_available_plots', 'fold_shuffle_param', 'X', 'USI', 'n_jobs_param', 'is_multiclass', 'exp_name_log', 'gpu_n_jobs_param', 'html_param', 'y_train', 'fold_groups_param', 'y', 'pipeline', 'target_param', 'seed', 'logging_param', 'X_train', 'data', 'y_test', 'fold_generator', 'fix_imbalance', 'log_plots_param', 'X_test', 'gpu_param', '_ml_usecase', 'exp_id', 'memory'}
2025-03-01 14:45:59,787:INFO:Checking environment
2025-03-01 14:45:59,787:INFO:python_version: 3.11.7
2025-03-01 14:45:59,787:INFO:python_build: ('tags/v3.11.7:fa7a6f2', 'Dec  4 2023 19:24:49')
2025-03-01 14:45:59,787:INFO:machine: AMD64
2025-03-01 14:45:59,795:INFO:platform: Windows-10-10.0.22631-SP0
2025-03-01 14:45:59,799:INFO:Memory: svmem(total=16369410048, available=2883309568, percent=82.4, used=13486100480, free=2883309568)
2025-03-01 14:45:59,799:INFO:Physical Core: 8
2025-03-01 14:45:59,799:INFO:Logical Core: 16
2025-03-01 14:45:59,799:INFO:Checking libraries
2025-03-01 14:45:59,799:INFO:System:
2025-03-01 14:45:59,799:INFO:    python: 3.11.7 (tags/v3.11.7:fa7a6f2, Dec  4 2023, 19:24:49) [MSC v.1937 64 bit (AMD64)]
2025-03-01 14:45:59,799:INFO:executable: C:\Users\mfira\AppData\Local\Programs\Python\Python311\python.exe
2025-03-01 14:45:59,799:INFO:   machine: Windows-10-10.0.22631-SP0
2025-03-01 14:45:59,799:INFO:PyCaret required dependencies:
2025-03-01 14:45:59,916:INFO:                 pip: 25.0
2025-03-01 14:45:59,916:INFO:          setuptools: 75.6.0
2025-03-01 14:45:59,916:INFO:             pycaret: 3.3.2
2025-03-01 14:45:59,916:INFO:             IPython: 8.32.0
2025-03-01 14:45:59,916:INFO:          ipywidgets: 8.1.5
2025-03-01 14:45:59,916:INFO:                tqdm: 4.67.0
2025-03-01 14:45:59,916:INFO:               numpy: 1.26.4
2025-03-01 14:45:59,916:INFO:              pandas: 2.1.4
2025-03-01 14:45:59,916:INFO:              jinja2: 3.1.5
2025-03-01 14:45:59,916:INFO:               scipy: 1.11.4
2025-03-01 14:45:59,916:INFO:              joblib: 1.3.2
2025-03-01 14:45:59,916:INFO:             sklearn: 1.4.2
2025-03-01 14:45:59,916:INFO:                pyod: 2.0.3
2025-03-01 14:45:59,916:INFO:            imblearn: 0.13.0
2025-03-01 14:45:59,916:INFO:   category_encoders: 2.7.0
2025-03-01 14:45:59,916:INFO:            lightgbm: 4.6.0
2025-03-01 14:45:59,916:INFO:               numba: 0.61.0
2025-03-01 14:45:59,916:INFO:            requests: 2.32.3
2025-03-01 14:45:59,917:INFO:          matplotlib: 3.7.5
2025-03-01 14:45:59,917:INFO:          scikitplot: 0.3.7
2025-03-01 14:45:59,917:INFO:         yellowbrick: 1.5
2025-03-01 14:45:59,917:INFO:              plotly: 6.0.0
2025-03-01 14:45:59,917:INFO:    plotly-resampler: Not installed
2025-03-01 14:45:59,917:INFO:             kaleido: 0.2.1
2025-03-01 14:45:59,917:INFO:           schemdraw: 0.15
2025-03-01 14:45:59,917:INFO:         statsmodels: 0.14.4
2025-03-01 14:45:59,917:INFO:              sktime: 0.26.0
2025-03-01 14:45:59,917:INFO:               tbats: 1.1.3
2025-03-01 14:45:59,917:INFO:            pmdarima: 2.0.4
2025-03-01 14:45:59,917:INFO:              psutil: 6.1.1
2025-03-01 14:45:59,917:INFO:          markupsafe: 3.0.2
2025-03-01 14:45:59,917:INFO:             pickle5: Not installed
2025-03-01 14:45:59,917:INFO:         cloudpickle: 3.1.0
2025-03-01 14:45:59,917:INFO:         deprecation: 2.1.0
2025-03-01 14:45:59,917:INFO:              xxhash: 3.5.0
2025-03-01 14:45:59,917:INFO:           wurlitzer: Not installed
2025-03-01 14:45:59,917:INFO:PyCaret optional dependencies:
2025-03-01 14:45:59,931:INFO:                shap: Not installed
2025-03-01 14:45:59,931:INFO:           interpret: Not installed
2025-03-01 14:45:59,931:INFO:                umap: Not installed
2025-03-01 14:45:59,931:INFO:     ydata_profiling: Not installed
2025-03-01 14:45:59,931:INFO:  explainerdashboard: Not installed
2025-03-01 14:45:59,931:INFO:             autoviz: Not installed
2025-03-01 14:45:59,931:INFO:           fairlearn: Not installed
2025-03-01 14:45:59,931:INFO:          deepchecks: Not installed
2025-03-01 14:45:59,931:INFO:             xgboost: Not installed
2025-03-01 14:45:59,931:INFO:            catboost: Not installed
2025-03-01 14:45:59,931:INFO:              kmodes: Not installed
2025-03-01 14:45:59,931:INFO:             mlxtend: Not installed
2025-03-01 14:45:59,931:INFO:       statsforecast: Not installed
2025-03-01 14:45:59,931:INFO:        tune_sklearn: Not installed
2025-03-01 14:45:59,931:INFO:                 ray: Not installed
2025-03-01 14:45:59,931:INFO:            hyperopt: Not installed
2025-03-01 14:45:59,931:INFO:              optuna: Not installed
2025-03-01 14:45:59,931:INFO:               skopt: Not installed
2025-03-01 14:45:59,931:INFO:              mlflow: Not installed
2025-03-01 14:45:59,931:INFO:              gradio: Not installed
2025-03-01 14:45:59,931:INFO:             fastapi: Not installed
2025-03-01 14:45:59,931:INFO:             uvicorn: Not installed
2025-03-01 14:45:59,931:INFO:              m2cgen: Not installed
2025-03-01 14:45:59,931:INFO:           evidently: Not installed
2025-03-01 14:45:59,931:INFO:               fugue: Not installed
2025-03-01 14:45:59,931:INFO:           streamlit: 1.42.0
2025-03-01 14:45:59,931:INFO:             prophet: 1.1.6
2025-03-01 14:45:59,931:INFO:None
2025-03-01 14:45:59,931:INFO:Set up data.
2025-03-01 14:45:59,939:INFO:Set up folding strategy.
2025-03-01 14:45:59,939:INFO:Set up train/test split.
2025-03-01 14:45:59,945:INFO:Set up index.
2025-03-01 14:45:59,945:INFO:Assigning column types.
2025-03-01 14:45:59,950:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-03-01 14:45:59,982:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-01 14:45:59,985:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-01 14:46:00,013:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:46:00,014:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:46:00,046:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-01 14:46:00,047:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-01 14:46:00,065:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:46:00,065:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:46:00,066:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-03-01 14:46:00,095:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-01 14:46:00,110:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:46:00,110:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:46:00,137:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-01 14:46:00,157:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:46:00,157:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:46:00,157:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-03-01 14:46:00,209:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:46:00,210:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:46:00,255:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:46:00,255:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:46:00,267:INFO:Preparing preprocessing pipeline...
2025-03-01 14:46:00,275:INFO:Set up label encoding.
2025-03-01 14:46:00,275:INFO:Set up simple imputation.
2025-03-01 14:46:00,275:INFO:Set up feature normalization.
2025-03-01 14:46:00,276:INFO:Set up column name cleaning.
2025-03-01 14:46:00,322:INFO:Finished creating preprocessing pipeline.
2025-03-01 14:46:00,329:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\mfira\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Absolute Magnitude',
                                             'Est Dia in KM(min)',
                                             'Est Dia in KM(max)',
                                             'Relative Velocity km per sec',
                                             'Miss Dist.(Astron...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-03-01 14:46:00,329:INFO:Creating final display dataframe.
2025-03-01 14:46:00,419:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target         Hazardous
2                   Target type            Binary
3                Target mapping       -1: 0, 1: 1
4           Original data shape        (7864, 22)
5        Transformed data shape        (7864, 22)
6   Transformed train set shape        (5504, 22)
7    Transformed test set shape        (2360, 22)
8              Numeric features                21
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13                    Normalize              True
14             Normalize method            zscore
15               Fold Generator   StratifiedKFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  clf-default-name
21                          USI              d112
2025-03-01 14:46:00,472:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:46:00,472:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:46:00,520:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:46:00,520:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:46:00,522:INFO:setup() successfully completed in 0.74s...............
2025-03-01 14:46:00,522:INFO:Initializing compare_models()
2025-03-01 14:46:00,522:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B0D607090>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000022B0D607090>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-03-01 14:46:00,522:INFO:Checking exceptions
2025-03-01 14:46:00,526:INFO:Preparing display monitor
2025-03-01 14:46:00,526:INFO:Initializing Logistic Regression
2025-03-01 14:46:00,526:INFO:Total runtime is 0.0 minutes
2025-03-01 14:46:00,526:INFO:SubProcess create_model() called ==================================
2025-03-01 14:46:00,526:INFO:Initializing create_model()
2025-03-01 14:46:00,526:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B0D607090>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022B116FEE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:46:00,526:INFO:Checking exceptions
2025-03-01 14:46:00,526:INFO:Importing libraries
2025-03-01 14:46:00,526:INFO:Copying training dataset
2025-03-01 14:46:00,526:INFO:Defining folds
2025-03-01 14:46:00,526:INFO:Declaring metric variables
2025-03-01 14:46:00,526:INFO:Importing untrained model
2025-03-01 14:46:00,526:INFO:Logistic Regression Imported successfully
2025-03-01 14:46:00,526:INFO:Starting cross validation
2025-03-01 14:46:00,535:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:46:04,527:INFO:Calculating mean and std
2025-03-01 14:46:04,527:INFO:Creating metrics dataframe
2025-03-01 14:46:04,529:INFO:Uploading results into container
2025-03-01 14:46:04,529:INFO:Uploading model into container now
2025-03-01 14:46:04,529:INFO:_master_model_container: 1
2025-03-01 14:46:04,529:INFO:_display_container: 2
2025-03-01 14:46:04,529:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-01 14:46:04,529:INFO:create_model() successfully completed......................................
2025-03-01 14:46:04,630:INFO:SubProcess create_model() end ==================================
2025-03-01 14:46:04,630:INFO:Creating metrics dataframe
2025-03-01 14:46:04,630:INFO:Initializing K Neighbors Classifier
2025-03-01 14:46:04,630:INFO:Total runtime is 0.06840258439381917 minutes
2025-03-01 14:46:04,630:INFO:SubProcess create_model() called ==================================
2025-03-01 14:46:04,630:INFO:Initializing create_model()
2025-03-01 14:46:04,630:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B0D607090>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022B116FEE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:46:04,630:INFO:Checking exceptions
2025-03-01 14:46:04,630:INFO:Importing libraries
2025-03-01 14:46:04,630:INFO:Copying training dataset
2025-03-01 14:46:04,637:INFO:Defining folds
2025-03-01 14:46:04,637:INFO:Declaring metric variables
2025-03-01 14:46:04,637:INFO:Importing untrained model
2025-03-01 14:46:04,637:INFO:K Neighbors Classifier Imported successfully
2025-03-01 14:46:04,637:INFO:Starting cross validation
2025-03-01 14:46:04,637:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:46:07,151:INFO:Calculating mean and std
2025-03-01 14:46:07,151:INFO:Creating metrics dataframe
2025-03-01 14:46:07,155:INFO:Uploading results into container
2025-03-01 14:46:07,156:INFO:Uploading model into container now
2025-03-01 14:46:07,157:INFO:_master_model_container: 2
2025-03-01 14:46:07,157:INFO:_display_container: 2
2025-03-01 14:46:07,157:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-03-01 14:46:07,157:INFO:create_model() successfully completed......................................
2025-03-01 14:46:07,256:INFO:SubProcess create_model() end ==================================
2025-03-01 14:46:07,256:INFO:Creating metrics dataframe
2025-03-01 14:46:07,256:INFO:Initializing Naive Bayes
2025-03-01 14:46:07,256:INFO:Total runtime is 0.11217850049336751 minutes
2025-03-01 14:46:07,256:INFO:SubProcess create_model() called ==================================
2025-03-01 14:46:07,256:INFO:Initializing create_model()
2025-03-01 14:46:07,256:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B0D607090>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022B116FEE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:46:07,256:INFO:Checking exceptions
2025-03-01 14:46:07,256:INFO:Importing libraries
2025-03-01 14:46:07,256:INFO:Copying training dataset
2025-03-01 14:46:07,269:INFO:Defining folds
2025-03-01 14:46:07,269:INFO:Declaring metric variables
2025-03-01 14:46:07,269:INFO:Importing untrained model
2025-03-01 14:46:07,269:INFO:Naive Bayes Imported successfully
2025-03-01 14:46:07,269:INFO:Starting cross validation
2025-03-01 14:46:07,269:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:46:07,351:INFO:Calculating mean and std
2025-03-01 14:46:07,351:INFO:Creating metrics dataframe
2025-03-01 14:46:07,351:INFO:Uploading results into container
2025-03-01 14:46:07,351:INFO:Uploading model into container now
2025-03-01 14:46:07,351:INFO:_master_model_container: 3
2025-03-01 14:46:07,351:INFO:_display_container: 2
2025-03-01 14:46:07,351:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-03-01 14:46:07,351:INFO:create_model() successfully completed......................................
2025-03-01 14:46:07,426:INFO:SubProcess create_model() end ==================================
2025-03-01 14:46:07,426:INFO:Creating metrics dataframe
2025-03-01 14:46:07,427:INFO:Initializing Decision Tree Classifier
2025-03-01 14:46:07,427:INFO:Total runtime is 0.11502058108647664 minutes
2025-03-01 14:46:07,427:INFO:SubProcess create_model() called ==================================
2025-03-01 14:46:07,427:INFO:Initializing create_model()
2025-03-01 14:46:07,427:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B0D607090>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022B116FEE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:46:07,427:INFO:Checking exceptions
2025-03-01 14:46:07,427:INFO:Importing libraries
2025-03-01 14:46:07,427:INFO:Copying training dataset
2025-03-01 14:46:07,433:INFO:Defining folds
2025-03-01 14:46:07,433:INFO:Declaring metric variables
2025-03-01 14:46:07,433:INFO:Importing untrained model
2025-03-01 14:46:07,433:INFO:Decision Tree Classifier Imported successfully
2025-03-01 14:46:07,433:INFO:Starting cross validation
2025-03-01 14:46:07,435:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:46:07,535:INFO:Calculating mean and std
2025-03-01 14:46:07,536:INFO:Creating metrics dataframe
2025-03-01 14:46:07,537:INFO:Uploading results into container
2025-03-01 14:46:07,537:INFO:Uploading model into container now
2025-03-01 14:46:07,537:INFO:_master_model_container: 4
2025-03-01 14:46:07,537:INFO:_display_container: 2
2025-03-01 14:46:07,537:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best')
2025-03-01 14:46:07,537:INFO:create_model() successfully completed......................................
2025-03-01 14:46:07,611:INFO:SubProcess create_model() end ==================================
2025-03-01 14:46:07,611:INFO:Creating metrics dataframe
2025-03-01 14:46:07,611:INFO:Initializing SVM - Linear Kernel
2025-03-01 14:46:07,611:INFO:Total runtime is 0.11809803247451782 minutes
2025-03-01 14:46:07,611:INFO:SubProcess create_model() called ==================================
2025-03-01 14:46:07,611:INFO:Initializing create_model()
2025-03-01 14:46:07,611:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B0D607090>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022B116FEE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:46:07,611:INFO:Checking exceptions
2025-03-01 14:46:07,611:INFO:Importing libraries
2025-03-01 14:46:07,611:INFO:Copying training dataset
2025-03-01 14:46:07,615:INFO:Defining folds
2025-03-01 14:46:07,615:INFO:Declaring metric variables
2025-03-01 14:46:07,615:INFO:Importing untrained model
2025-03-01 14:46:07,615:INFO:SVM - Linear Kernel Imported successfully
2025-03-01 14:46:07,615:INFO:Starting cross validation
2025-03-01 14:46:07,615:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:46:07,710:INFO:Calculating mean and std
2025-03-01 14:46:07,710:INFO:Creating metrics dataframe
2025-03-01 14:46:07,710:INFO:Uploading results into container
2025-03-01 14:46:07,710:INFO:Uploading model into container now
2025-03-01 14:46:07,710:INFO:_master_model_container: 5
2025-03-01 14:46:07,710:INFO:_display_container: 2
2025-03-01 14:46:07,710:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-03-01 14:46:07,710:INFO:create_model() successfully completed......................................
2025-03-01 14:46:07,786:INFO:SubProcess create_model() end ==================================
2025-03-01 14:46:07,786:INFO:Creating metrics dataframe
2025-03-01 14:46:07,786:INFO:Initializing Ridge Classifier
2025-03-01 14:46:07,786:INFO:Total runtime is 0.12100077072779337 minutes
2025-03-01 14:46:07,786:INFO:SubProcess create_model() called ==================================
2025-03-01 14:46:07,786:INFO:Initializing create_model()
2025-03-01 14:46:07,786:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B0D607090>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022B116FEE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:46:07,786:INFO:Checking exceptions
2025-03-01 14:46:07,786:INFO:Importing libraries
2025-03-01 14:46:07,786:INFO:Copying training dataset
2025-03-01 14:46:07,789:INFO:Defining folds
2025-03-01 14:46:07,789:INFO:Declaring metric variables
2025-03-01 14:46:07,789:INFO:Importing untrained model
2025-03-01 14:46:07,789:INFO:Ridge Classifier Imported successfully
2025-03-01 14:46:07,789:INFO:Starting cross validation
2025-03-01 14:46:07,795:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:46:07,865:INFO:Calculating mean and std
2025-03-01 14:46:07,866:INFO:Creating metrics dataframe
2025-03-01 14:46:07,866:INFO:Uploading results into container
2025-03-01 14:46:07,868:INFO:Uploading model into container now
2025-03-01 14:46:07,868:INFO:_master_model_container: 6
2025-03-01 14:46:07,868:INFO:_display_container: 2
2025-03-01 14:46:07,868:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2025-03-01 14:46:07,868:INFO:create_model() successfully completed......................................
2025-03-01 14:46:07,942:INFO:SubProcess create_model() end ==================================
2025-03-01 14:46:07,942:INFO:Creating metrics dataframe
2025-03-01 14:46:07,943:INFO:Initializing Random Forest Classifier
2025-03-01 14:46:07,943:INFO:Total runtime is 0.12362488905588785 minutes
2025-03-01 14:46:07,945:INFO:SubProcess create_model() called ==================================
2025-03-01 14:46:07,945:INFO:Initializing create_model()
2025-03-01 14:46:07,945:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B0D607090>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022B116FEE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:46:07,945:INFO:Checking exceptions
2025-03-01 14:46:07,945:INFO:Importing libraries
2025-03-01 14:46:07,945:INFO:Copying training dataset
2025-03-01 14:46:07,949:INFO:Defining folds
2025-03-01 14:46:07,949:INFO:Declaring metric variables
2025-03-01 14:46:07,950:INFO:Importing untrained model
2025-03-01 14:46:07,950:INFO:Random Forest Classifier Imported successfully
2025-03-01 14:46:07,950:INFO:Starting cross validation
2025-03-01 14:46:07,950:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:46:08,710:INFO:Calculating mean and std
2025-03-01 14:46:08,710:INFO:Creating metrics dataframe
2025-03-01 14:46:08,713:INFO:Uploading results into container
2025-03-01 14:46:08,713:INFO:Uploading model into container now
2025-03-01 14:46:08,713:INFO:_master_model_container: 7
2025-03-01 14:46:08,713:INFO:_display_container: 2
2025-03-01 14:46:08,713:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-03-01 14:46:08,713:INFO:create_model() successfully completed......................................
2025-03-01 14:46:08,787:INFO:SubProcess create_model() end ==================================
2025-03-01 14:46:08,787:INFO:Creating metrics dataframe
2025-03-01 14:46:08,787:INFO:Initializing Quadratic Discriminant Analysis
2025-03-01 14:46:08,787:INFO:Total runtime is 0.13769619464874266 minutes
2025-03-01 14:46:08,787:INFO:SubProcess create_model() called ==================================
2025-03-01 14:46:08,787:INFO:Initializing create_model()
2025-03-01 14:46:08,787:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B0D607090>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022B116FEE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:46:08,787:INFO:Checking exceptions
2025-03-01 14:46:08,787:INFO:Importing libraries
2025-03-01 14:46:08,787:INFO:Copying training dataset
2025-03-01 14:46:08,795:INFO:Defining folds
2025-03-01 14:46:08,795:INFO:Declaring metric variables
2025-03-01 14:46:08,795:INFO:Importing untrained model
2025-03-01 14:46:08,797:INFO:Quadratic Discriminant Analysis Imported successfully
2025-03-01 14:46:08,797:INFO:Starting cross validation
2025-03-01 14:46:08,797:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:46:08,857:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:46:08,857:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:46:08,857:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:46:08,857:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:46:08,857:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:46:08,857:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:46:08,887:INFO:Calculating mean and std
2025-03-01 14:46:08,887:INFO:Creating metrics dataframe
2025-03-01 14:46:08,887:INFO:Uploading results into container
2025-03-01 14:46:08,887:INFO:Uploading model into container now
2025-03-01 14:46:08,887:INFO:_master_model_container: 8
2025-03-01 14:46:08,887:INFO:_display_container: 2
2025-03-01 14:46:08,887:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-03-01 14:46:08,887:INFO:create_model() successfully completed......................................
2025-03-01 14:46:08,956:INFO:SubProcess create_model() end ==================================
2025-03-01 14:46:08,956:INFO:Creating metrics dataframe
2025-03-01 14:46:08,956:INFO:Initializing Ada Boost Classifier
2025-03-01 14:46:08,965:INFO:Total runtime is 0.14065372149149577 minutes
2025-03-01 14:46:08,965:INFO:SubProcess create_model() called ==================================
2025-03-01 14:46:08,965:INFO:Initializing create_model()
2025-03-01 14:46:08,965:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B0D607090>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022B116FEE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:46:08,965:INFO:Checking exceptions
2025-03-01 14:46:08,965:INFO:Importing libraries
2025-03-01 14:46:08,965:INFO:Copying training dataset
2025-03-01 14:46:08,970:INFO:Defining folds
2025-03-01 14:46:08,970:INFO:Declaring metric variables
2025-03-01 14:46:08,970:INFO:Importing untrained model
2025-03-01 14:46:08,970:INFO:Ada Boost Classifier Imported successfully
2025-03-01 14:46:08,971:INFO:Starting cross validation
2025-03-01 14:46:08,971:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:46:09,023:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:46:09,023:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:46:09,023:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:46:09,023:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:46:09,023:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:46:09,023:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:46:09,023:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:46:09,023:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:46:09,691:INFO:Calculating mean and std
2025-03-01 14:46:09,691:INFO:Creating metrics dataframe
2025-03-01 14:46:09,691:INFO:Uploading results into container
2025-03-01 14:46:09,691:INFO:Uploading model into container now
2025-03-01 14:46:09,691:INFO:_master_model_container: 9
2025-03-01 14:46:09,691:INFO:_display_container: 2
2025-03-01 14:46:09,695:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42)
2025-03-01 14:46:09,695:INFO:create_model() successfully completed......................................
2025-03-01 14:46:09,770:INFO:SubProcess create_model() end ==================================
2025-03-01 14:46:09,770:INFO:Creating metrics dataframe
2025-03-01 14:46:09,770:INFO:Initializing Gradient Boosting Classifier
2025-03-01 14:46:09,770:INFO:Total runtime is 0.15406705935796103 minutes
2025-03-01 14:46:09,770:INFO:SubProcess create_model() called ==================================
2025-03-01 14:46:09,770:INFO:Initializing create_model()
2025-03-01 14:46:09,770:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B0D607090>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022B116FEE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:46:09,770:INFO:Checking exceptions
2025-03-01 14:46:09,770:INFO:Importing libraries
2025-03-01 14:46:09,770:INFO:Copying training dataset
2025-03-01 14:46:09,778:INFO:Defining folds
2025-03-01 14:46:09,778:INFO:Declaring metric variables
2025-03-01 14:46:09,778:INFO:Importing untrained model
2025-03-01 14:46:09,778:INFO:Gradient Boosting Classifier Imported successfully
2025-03-01 14:46:09,778:INFO:Starting cross validation
2025-03-01 14:46:09,778:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:46:12,456:INFO:Calculating mean and std
2025-03-01 14:46:12,456:INFO:Creating metrics dataframe
2025-03-01 14:46:12,458:INFO:Uploading results into container
2025-03-01 14:46:12,458:INFO:Uploading model into container now
2025-03-01 14:46:12,459:INFO:_master_model_container: 10
2025-03-01 14:46:12,459:INFO:_display_container: 2
2025-03-01 14:46:12,459:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-03-01 14:46:12,459:INFO:create_model() successfully completed......................................
2025-03-01 14:46:12,538:INFO:SubProcess create_model() end ==================================
2025-03-01 14:46:12,538:INFO:Creating metrics dataframe
2025-03-01 14:46:12,538:INFO:Initializing Linear Discriminant Analysis
2025-03-01 14:46:12,538:INFO:Total runtime is 0.20021119912465413 minutes
2025-03-01 14:46:12,538:INFO:SubProcess create_model() called ==================================
2025-03-01 14:46:12,541:INFO:Initializing create_model()
2025-03-01 14:46:12,541:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B0D607090>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022B116FEE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:46:12,541:INFO:Checking exceptions
2025-03-01 14:46:12,541:INFO:Importing libraries
2025-03-01 14:46:12,541:INFO:Copying training dataset
2025-03-01 14:46:12,546:INFO:Defining folds
2025-03-01 14:46:12,546:INFO:Declaring metric variables
2025-03-01 14:46:12,546:INFO:Importing untrained model
2025-03-01 14:46:12,546:INFO:Linear Discriminant Analysis Imported successfully
2025-03-01 14:46:12,548:INFO:Starting cross validation
2025-03-01 14:46:12,549:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:46:12,630:INFO:Calculating mean and std
2025-03-01 14:46:12,630:INFO:Creating metrics dataframe
2025-03-01 14:46:12,632:INFO:Uploading results into container
2025-03-01 14:46:12,632:INFO:Uploading model into container now
2025-03-01 14:46:12,633:INFO:_master_model_container: 11
2025-03-01 14:46:12,633:INFO:_display_container: 2
2025-03-01 14:46:12,633:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-03-01 14:46:12,633:INFO:create_model() successfully completed......................................
2025-03-01 14:46:12,713:INFO:SubProcess create_model() end ==================================
2025-03-01 14:46:12,713:INFO:Creating metrics dataframe
2025-03-01 14:46:12,715:INFO:Initializing Extra Trees Classifier
2025-03-01 14:46:12,716:INFO:Total runtime is 0.20317004521687826 minutes
2025-03-01 14:46:12,716:INFO:SubProcess create_model() called ==================================
2025-03-01 14:46:12,716:INFO:Initializing create_model()
2025-03-01 14:46:12,716:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B0D607090>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022B116FEE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:46:12,716:INFO:Checking exceptions
2025-03-01 14:46:12,716:INFO:Importing libraries
2025-03-01 14:46:12,716:INFO:Copying training dataset
2025-03-01 14:46:12,717:INFO:Defining folds
2025-03-01 14:46:12,717:INFO:Declaring metric variables
2025-03-01 14:46:12,717:INFO:Importing untrained model
2025-03-01 14:46:12,717:INFO:Extra Trees Classifier Imported successfully
2025-03-01 14:46:12,717:INFO:Starting cross validation
2025-03-01 14:46:12,717:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:46:13,266:INFO:Calculating mean and std
2025-03-01 14:46:13,266:INFO:Creating metrics dataframe
2025-03-01 14:46:13,266:INFO:Uploading results into container
2025-03-01 14:46:13,266:INFO:Uploading model into container now
2025-03-01 14:46:13,266:INFO:_master_model_container: 12
2025-03-01 14:46:13,266:INFO:_display_container: 2
2025-03-01 14:46:13,266:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False)
2025-03-01 14:46:13,266:INFO:create_model() successfully completed......................................
2025-03-01 14:46:13,346:INFO:SubProcess create_model() end ==================================
2025-03-01 14:46:13,346:INFO:Creating metrics dataframe
2025-03-01 14:46:13,349:INFO:Initializing Light Gradient Boosting Machine
2025-03-01 14:46:13,349:INFO:Total runtime is 0.21372430721918742 minutes
2025-03-01 14:46:13,349:INFO:SubProcess create_model() called ==================================
2025-03-01 14:46:13,349:INFO:Initializing create_model()
2025-03-01 14:46:13,349:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B0D607090>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022B116FEE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:46:13,349:INFO:Checking exceptions
2025-03-01 14:46:13,349:INFO:Importing libraries
2025-03-01 14:46:13,349:INFO:Copying training dataset
2025-03-01 14:46:13,356:INFO:Defining folds
2025-03-01 14:46:13,356:INFO:Declaring metric variables
2025-03-01 14:46:13,356:INFO:Importing untrained model
2025-03-01 14:46:13,356:INFO:Light Gradient Boosting Machine Imported successfully
2025-03-01 14:46:13,356:INFO:Starting cross validation
2025-03-01 14:46:13,356:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:46:14,603:INFO:Calculating mean and std
2025-03-01 14:46:14,604:INFO:Creating metrics dataframe
2025-03-01 14:46:14,606:INFO:Uploading results into container
2025-03-01 14:46:14,606:INFO:Uploading model into container now
2025-03-01 14:46:14,607:INFO:_master_model_container: 13
2025-03-01 14:46:14,607:INFO:_display_container: 2
2025-03-01 14:46:14,607:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-03-01 14:46:14,607:INFO:create_model() successfully completed......................................
2025-03-01 14:46:14,708:INFO:SubProcess create_model() end ==================================
2025-03-01 14:46:14,708:INFO:Creating metrics dataframe
2025-03-01 14:46:14,715:INFO:Initializing Dummy Classifier
2025-03-01 14:46:14,715:INFO:Total runtime is 0.2364968498547872 minutes
2025-03-01 14:46:14,716:INFO:SubProcess create_model() called ==================================
2025-03-01 14:46:14,716:INFO:Initializing create_model()
2025-03-01 14:46:14,716:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B0D607090>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000022B116FEE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:46:14,716:INFO:Checking exceptions
2025-03-01 14:46:14,716:INFO:Importing libraries
2025-03-01 14:46:14,716:INFO:Copying training dataset
2025-03-01 14:46:14,719:INFO:Defining folds
2025-03-01 14:46:14,719:INFO:Declaring metric variables
2025-03-01 14:46:14,719:INFO:Importing untrained model
2025-03-01 14:46:14,719:INFO:Dummy Classifier Imported successfully
2025-03-01 14:46:14,719:INFO:Starting cross validation
2025-03-01 14:46:14,719:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:46:14,797:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:46:14,797:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:46:14,797:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:46:14,797:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:46:14,797:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:46:14,797:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:46:14,797:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:46:14,804:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:46:14,815:INFO:Calculating mean and std
2025-03-01 14:46:14,815:INFO:Creating metrics dataframe
2025-03-01 14:46:14,816:INFO:Uploading results into container
2025-03-01 14:46:14,816:INFO:Uploading model into container now
2025-03-01 14:46:14,816:INFO:_master_model_container: 14
2025-03-01 14:46:14,816:INFO:_display_container: 2
2025-03-01 14:46:14,816:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2025-03-01 14:46:14,816:INFO:create_model() successfully completed......................................
2025-03-01 14:46:14,889:INFO:SubProcess create_model() end ==================================
2025-03-01 14:46:14,889:INFO:Creating metrics dataframe
2025-03-01 14:46:14,923:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:339: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  .applymap(highlight_cols, subset=["TT (Sec)"])

2025-03-01 14:46:14,925:INFO:Initializing create_model()
2025-03-01 14:46:14,925:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000022B0D607090>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:46:14,925:INFO:Checking exceptions
2025-03-01 14:46:14,925:INFO:Importing libraries
2025-03-01 14:46:14,925:INFO:Copying training dataset
2025-03-01 14:46:14,927:INFO:Defining folds
2025-03-01 14:46:14,927:INFO:Declaring metric variables
2025-03-01 14:46:14,927:INFO:Importing untrained model
2025-03-01 14:46:14,927:INFO:Declaring custom model
2025-03-01 14:46:14,927:INFO:Gradient Boosting Classifier Imported successfully
2025-03-01 14:46:14,927:INFO:Cross validation set to False
2025-03-01 14:46:14,927:INFO:Fitting Model
2025-03-01 14:46:17,247:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-03-01 14:46:17,247:INFO:create_model() successfully completed......................................
2025-03-01 14:46:17,326:INFO:_master_model_container: 14
2025-03-01 14:46:17,326:INFO:_display_container: 2
2025-03-01 14:46:17,326:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-03-01 14:46:17,326:INFO:compare_models() successfully completed......................................
2025-03-01 14:46:17,335:INFO:Initializing save_model()
2025-03-01 14:46:17,335:INFO:save_model(model=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), model_name=models//best_pycaret_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\mfira\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Absolute Magnitude',
                                             'Est Dia in KM(min)',
                                             'Est Dia in KM(max)',
                                             'Relative Velocity km per sec',
                                             'Miss Dist.(Astron...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-03-01 14:46:17,335:INFO:Adding model into prep_pipe
2025-03-01 14:46:17,335:INFO:models//best_pycaret_model.pkl saved in current working directory
2025-03-01 14:46:17,346:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Absolute Magnitude',
                                             'Est Dia in KM(min)',
                                             'Est Dia in KM(max)',
                                             'Relative Velocity km per sec',
                                             'Miss Dist.(Astronomical)',
                                             'Orbiting Body',
                                             'Orbit Uncertaini...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=3, max_features=None,
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.0,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=100,
                                            n_iter_no_change=None,
                                            random_state=42, subsample=1.0,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False)
2025-03-01 14:46:17,347:INFO:save_model() successfully completed......................................
2025-03-01 14:50:02,866:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:50:02,866:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:50:02,866:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:50:02,866:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:50:03,377:WARNING:D:\AstroGaurd\src\eda.py:28: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.countplot(x=df["Hazardous"], palette="viridis")

2025-03-01 14:50:04,323:INFO:PyCaret ClassificationExperiment
2025-03-01 14:50:04,323:INFO:Logging name: clf-default-name
2025-03-01 14:50:04,323:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-03-01 14:50:04,323:INFO:version 3.3.2
2025-03-01 14:50:04,323:INFO:Initializing setup()
2025-03-01 14:50:04,323:INFO:self.USI: 3bff
2025-03-01 14:50:04,323:INFO:self._variable_keys: {'USI', 'gpu_n_jobs_param', 'y', 'n_jobs_param', 'X_test', 'log_plots_param', 'gpu_param', 'exp_name_log', 'idx', 'fold_shuffle_param', 'y_test', 'html_param', 'exp_id', 'logging_param', 'seed', 'fold_generator', 'fold_groups_param', 'is_multiclass', 'data', '_available_plots', '_ml_usecase', 'memory', 'X', 'X_train', 'pipeline', 'target_param', 'fix_imbalance', 'y_train'}
2025-03-01 14:50:04,323:INFO:Checking environment
2025-03-01 14:50:04,323:INFO:python_version: 3.11.7
2025-03-01 14:50:04,323:INFO:python_build: ('tags/v3.11.7:fa7a6f2', 'Dec  4 2023 19:24:49')
2025-03-01 14:50:04,323:INFO:machine: AMD64
2025-03-01 14:50:04,332:INFO:platform: Windows-10-10.0.22631-SP0
2025-03-01 14:50:04,339:INFO:Memory: svmem(total=16369410048, available=2607374336, percent=84.1, used=13762035712, free=2607374336)
2025-03-01 14:50:04,339:INFO:Physical Core: 8
2025-03-01 14:50:04,339:INFO:Logical Core: 16
2025-03-01 14:50:04,340:INFO:Checking libraries
2025-03-01 14:50:04,340:INFO:System:
2025-03-01 14:50:04,340:INFO:    python: 3.11.7 (tags/v3.11.7:fa7a6f2, Dec  4 2023, 19:24:49) [MSC v.1937 64 bit (AMD64)]
2025-03-01 14:50:04,340:INFO:executable: C:\Users\mfira\AppData\Local\Programs\Python\Python311\python.exe
2025-03-01 14:50:04,340:INFO:   machine: Windows-10-10.0.22631-SP0
2025-03-01 14:50:04,340:INFO:PyCaret required dependencies:
2025-03-01 14:50:04,376:INFO:                 pip: 25.0
2025-03-01 14:50:04,376:INFO:          setuptools: 75.6.0
2025-03-01 14:50:04,376:INFO:             pycaret: 3.3.2
2025-03-01 14:50:04,376:INFO:             IPython: 8.32.0
2025-03-01 14:50:04,376:INFO:          ipywidgets: 8.1.5
2025-03-01 14:50:04,376:INFO:                tqdm: 4.67.0
2025-03-01 14:50:04,376:INFO:               numpy: 1.26.4
2025-03-01 14:50:04,376:INFO:              pandas: 2.1.4
2025-03-01 14:50:04,376:INFO:              jinja2: 3.1.5
2025-03-01 14:50:04,376:INFO:               scipy: 1.11.4
2025-03-01 14:50:04,376:INFO:              joblib: 1.3.2
2025-03-01 14:50:04,376:INFO:             sklearn: 1.4.2
2025-03-01 14:50:04,376:INFO:                pyod: 2.0.3
2025-03-01 14:50:04,376:INFO:            imblearn: 0.13.0
2025-03-01 14:50:04,376:INFO:   category_encoders: 2.7.0
2025-03-01 14:50:04,376:INFO:            lightgbm: 4.6.0
2025-03-01 14:50:04,376:INFO:               numba: 0.61.0
2025-03-01 14:50:04,376:INFO:            requests: 2.32.3
2025-03-01 14:50:04,376:INFO:          matplotlib: 3.7.5
2025-03-01 14:50:04,376:INFO:          scikitplot: 0.3.7
2025-03-01 14:50:04,376:INFO:         yellowbrick: 1.5
2025-03-01 14:50:04,376:INFO:              plotly: 6.0.0
2025-03-01 14:50:04,376:INFO:    plotly-resampler: Not installed
2025-03-01 14:50:04,376:INFO:             kaleido: 0.2.1
2025-03-01 14:50:04,376:INFO:           schemdraw: 0.15
2025-03-01 14:50:04,376:INFO:         statsmodels: 0.14.4
2025-03-01 14:50:04,376:INFO:              sktime: 0.26.0
2025-03-01 14:50:04,376:INFO:               tbats: 1.1.3
2025-03-01 14:50:04,376:INFO:            pmdarima: 2.0.4
2025-03-01 14:50:04,376:INFO:              psutil: 6.1.1
2025-03-01 14:50:04,376:INFO:          markupsafe: 3.0.2
2025-03-01 14:50:04,376:INFO:             pickle5: Not installed
2025-03-01 14:50:04,376:INFO:         cloudpickle: 3.1.0
2025-03-01 14:50:04,376:INFO:         deprecation: 2.1.0
2025-03-01 14:50:04,376:INFO:              xxhash: 3.5.0
2025-03-01 14:50:04,376:INFO:           wurlitzer: Not installed
2025-03-01 14:50:04,376:INFO:PyCaret optional dependencies:
2025-03-01 14:50:04,397:INFO:                shap: Not installed
2025-03-01 14:50:04,397:INFO:           interpret: Not installed
2025-03-01 14:50:04,397:INFO:                umap: Not installed
2025-03-01 14:50:04,397:INFO:     ydata_profiling: Not installed
2025-03-01 14:50:04,397:INFO:  explainerdashboard: Not installed
2025-03-01 14:50:04,397:INFO:             autoviz: Not installed
2025-03-01 14:50:04,397:INFO:           fairlearn: Not installed
2025-03-01 14:50:04,397:INFO:          deepchecks: Not installed
2025-03-01 14:50:04,397:INFO:             xgboost: Not installed
2025-03-01 14:50:04,397:INFO:            catboost: Not installed
2025-03-01 14:50:04,397:INFO:              kmodes: Not installed
2025-03-01 14:50:04,397:INFO:             mlxtend: Not installed
2025-03-01 14:50:04,397:INFO:       statsforecast: Not installed
2025-03-01 14:50:04,397:INFO:        tune_sklearn: Not installed
2025-03-01 14:50:04,397:INFO:                 ray: Not installed
2025-03-01 14:50:04,397:INFO:            hyperopt: Not installed
2025-03-01 14:50:04,397:INFO:              optuna: Not installed
2025-03-01 14:50:04,397:INFO:               skopt: Not installed
2025-03-01 14:50:04,397:INFO:              mlflow: Not installed
2025-03-01 14:50:04,397:INFO:              gradio: Not installed
2025-03-01 14:50:04,397:INFO:             fastapi: Not installed
2025-03-01 14:50:04,397:INFO:             uvicorn: Not installed
2025-03-01 14:50:04,397:INFO:              m2cgen: Not installed
2025-03-01 14:50:04,397:INFO:           evidently: Not installed
2025-03-01 14:50:04,397:INFO:               fugue: Not installed
2025-03-01 14:50:04,397:INFO:           streamlit: 1.42.0
2025-03-01 14:50:04,397:INFO:             prophet: 1.1.6
2025-03-01 14:50:04,397:INFO:None
2025-03-01 14:50:04,397:INFO:Set up data.
2025-03-01 14:50:04,397:INFO:Set up folding strategy.
2025-03-01 14:50:04,397:INFO:Set up train/test split.
2025-03-01 14:50:04,406:INFO:Set up index.
2025-03-01 14:50:04,406:INFO:Assigning column types.
2025-03-01 14:50:04,406:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-03-01 14:50:04,438:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-01 14:50:04,445:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-01 14:50:04,470:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:50:04,470:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:50:04,496:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-01 14:50:04,496:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-01 14:50:04,519:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:50:04,519:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:50:04,519:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-03-01 14:50:04,551:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-01 14:50:04,565:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:50:04,565:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:50:04,596:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-01 14:50:04,616:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:50:04,616:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:50:04,616:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-03-01 14:50:04,656:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:50:04,656:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:50:04,710:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:50:04,710:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:50:04,710:INFO:Preparing preprocessing pipeline...
2025-03-01 14:50:04,710:INFO:Set up label encoding.
2025-03-01 14:50:04,710:INFO:Set up simple imputation.
2025-03-01 14:50:04,710:INFO:Set up feature normalization.
2025-03-01 14:50:04,715:INFO:Set up column name cleaning.
2025-03-01 14:50:04,740:INFO:Finished creating preprocessing pipeline.
2025-03-01 14:50:04,747:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\mfira\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Absolute Magnitude',
                                             'Est Dia in KM(min)',
                                             'Est Dia in KM(max)',
                                             'Relative Velocity km per sec',
                                             'Miss Dist.(Astron...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-03-01 14:50:04,747:INFO:Creating final display dataframe.
2025-03-01 14:50:04,826:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target         Hazardous
2                   Target type            Binary
3                Target mapping       -1: 0, 1: 1
4           Original data shape        (7864, 22)
5        Transformed data shape        (7864, 22)
6   Transformed train set shape        (5504, 22)
7    Transformed test set shape        (2360, 22)
8              Numeric features                21
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13                    Normalize              True
14             Normalize method            zscore
15               Fold Generator   StratifiedKFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  clf-default-name
21                          USI              3bff
2025-03-01 14:50:04,885:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:50:04,885:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:50:04,935:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:50:04,935:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:50:04,937:INFO:setup() successfully completed in 0.62s...............
2025-03-01 14:50:04,937:INFO:Initializing compare_models()
2025-03-01 14:50:04,937:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=5, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 5, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-03-01 14:50:04,937:INFO:Checking exceptions
2025-03-01 14:50:04,937:INFO:Preparing display monitor
2025-03-01 14:50:04,945:INFO:Initializing Logistic Regression
2025-03-01 14:50:04,945:INFO:Total runtime is 0.0 minutes
2025-03-01 14:50:04,945:INFO:SubProcess create_model() called ==================================
2025-03-01 14:50:04,946:INFO:Initializing create_model()
2025-03-01 14:50:04,946:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EF5A7361D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:04,946:INFO:Checking exceptions
2025-03-01 14:50:04,946:INFO:Importing libraries
2025-03-01 14:50:04,946:INFO:Copying training dataset
2025-03-01 14:50:04,950:INFO:Defining folds
2025-03-01 14:50:04,950:INFO:Declaring metric variables
2025-03-01 14:50:04,950:INFO:Importing untrained model
2025-03-01 14:50:04,950:INFO:Logistic Regression Imported successfully
2025-03-01 14:50:04,950:INFO:Starting cross validation
2025-03-01 14:50:04,950:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:50:09,027:INFO:Calculating mean and std
2025-03-01 14:50:09,027:INFO:Creating metrics dataframe
2025-03-01 14:50:09,027:INFO:Uploading results into container
2025-03-01 14:50:09,027:INFO:Uploading model into container now
2025-03-01 14:50:09,027:INFO:_master_model_container: 1
2025-03-01 14:50:09,027:INFO:_display_container: 2
2025-03-01 14:50:09,027:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-01 14:50:09,027:INFO:create_model() successfully completed......................................
2025-03-01 14:50:09,129:INFO:SubProcess create_model() end ==================================
2025-03-01 14:50:09,129:INFO:Creating metrics dataframe
2025-03-01 14:50:09,129:INFO:Initializing K Neighbors Classifier
2025-03-01 14:50:09,129:INFO:Total runtime is 0.06973891655604045 minutes
2025-03-01 14:50:09,129:INFO:SubProcess create_model() called ==================================
2025-03-01 14:50:09,129:INFO:Initializing create_model()
2025-03-01 14:50:09,129:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EF5A7361D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:09,129:INFO:Checking exceptions
2025-03-01 14:50:09,129:INFO:Importing libraries
2025-03-01 14:50:09,129:INFO:Copying training dataset
2025-03-01 14:50:09,137:INFO:Defining folds
2025-03-01 14:50:09,137:INFO:Declaring metric variables
2025-03-01 14:50:09,137:INFO:Importing untrained model
2025-03-01 14:50:09,137:INFO:K Neighbors Classifier Imported successfully
2025-03-01 14:50:09,137:INFO:Starting cross validation
2025-03-01 14:50:09,137:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:50:11,655:INFO:Calculating mean and std
2025-03-01 14:50:11,657:INFO:Creating metrics dataframe
2025-03-01 14:50:11,660:INFO:Uploading results into container
2025-03-01 14:50:11,660:INFO:Uploading model into container now
2025-03-01 14:50:11,660:INFO:_master_model_container: 2
2025-03-01 14:50:11,660:INFO:_display_container: 2
2025-03-01 14:50:11,660:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-03-01 14:50:11,660:INFO:create_model() successfully completed......................................
2025-03-01 14:50:11,753:INFO:SubProcess create_model() end ==================================
2025-03-01 14:50:11,753:INFO:Creating metrics dataframe
2025-03-01 14:50:11,755:INFO:Initializing Naive Bayes
2025-03-01 14:50:11,756:INFO:Total runtime is 0.11352618535359701 minutes
2025-03-01 14:50:11,756:INFO:SubProcess create_model() called ==================================
2025-03-01 14:50:11,756:INFO:Initializing create_model()
2025-03-01 14:50:11,756:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EF5A7361D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:11,756:INFO:Checking exceptions
2025-03-01 14:50:11,756:INFO:Importing libraries
2025-03-01 14:50:11,756:INFO:Copying training dataset
2025-03-01 14:50:11,756:INFO:Defining folds
2025-03-01 14:50:11,756:INFO:Declaring metric variables
2025-03-01 14:50:11,756:INFO:Importing untrained model
2025-03-01 14:50:11,756:INFO:Naive Bayes Imported successfully
2025-03-01 14:50:11,756:INFO:Starting cross validation
2025-03-01 14:50:11,756:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:50:11,842:INFO:Calculating mean and std
2025-03-01 14:50:11,842:INFO:Creating metrics dataframe
2025-03-01 14:50:11,845:INFO:Uploading results into container
2025-03-01 14:50:11,845:INFO:Uploading model into container now
2025-03-01 14:50:11,845:INFO:_master_model_container: 3
2025-03-01 14:50:11,845:INFO:_display_container: 2
2025-03-01 14:50:11,845:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-03-01 14:50:11,845:INFO:create_model() successfully completed......................................
2025-03-01 14:50:11,917:INFO:SubProcess create_model() end ==================================
2025-03-01 14:50:11,917:INFO:Creating metrics dataframe
2025-03-01 14:50:11,920:INFO:Initializing Decision Tree Classifier
2025-03-01 14:50:11,920:INFO:Total runtime is 0.11626023848851523 minutes
2025-03-01 14:50:11,920:INFO:SubProcess create_model() called ==================================
2025-03-01 14:50:11,920:INFO:Initializing create_model()
2025-03-01 14:50:11,920:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EF5A7361D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:11,920:INFO:Checking exceptions
2025-03-01 14:50:11,920:INFO:Importing libraries
2025-03-01 14:50:11,920:INFO:Copying training dataset
2025-03-01 14:50:11,925:INFO:Defining folds
2025-03-01 14:50:11,925:INFO:Declaring metric variables
2025-03-01 14:50:11,925:INFO:Importing untrained model
2025-03-01 14:50:11,925:INFO:Decision Tree Classifier Imported successfully
2025-03-01 14:50:11,925:INFO:Starting cross validation
2025-03-01 14:50:11,925:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:50:12,027:INFO:Calculating mean and std
2025-03-01 14:50:12,028:INFO:Creating metrics dataframe
2025-03-01 14:50:12,028:INFO:Uploading results into container
2025-03-01 14:50:12,028:INFO:Uploading model into container now
2025-03-01 14:50:12,028:INFO:_master_model_container: 4
2025-03-01 14:50:12,028:INFO:_display_container: 2
2025-03-01 14:50:12,028:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best')
2025-03-01 14:50:12,028:INFO:create_model() successfully completed......................................
2025-03-01 14:50:12,106:INFO:SubProcess create_model() end ==================================
2025-03-01 14:50:12,106:INFO:Creating metrics dataframe
2025-03-01 14:50:12,107:INFO:Initializing SVM - Linear Kernel
2025-03-01 14:50:12,107:INFO:Total runtime is 0.11937103668848675 minutes
2025-03-01 14:50:12,107:INFO:SubProcess create_model() called ==================================
2025-03-01 14:50:12,107:INFO:Initializing create_model()
2025-03-01 14:50:12,107:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EF5A7361D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:12,107:INFO:Checking exceptions
2025-03-01 14:50:12,107:INFO:Importing libraries
2025-03-01 14:50:12,107:INFO:Copying training dataset
2025-03-01 14:50:12,111:INFO:Defining folds
2025-03-01 14:50:12,111:INFO:Declaring metric variables
2025-03-01 14:50:12,111:INFO:Importing untrained model
2025-03-01 14:50:12,111:INFO:SVM - Linear Kernel Imported successfully
2025-03-01 14:50:12,111:INFO:Starting cross validation
2025-03-01 14:50:12,111:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:50:12,206:INFO:Calculating mean and std
2025-03-01 14:50:12,206:INFO:Creating metrics dataframe
2025-03-01 14:50:12,206:INFO:Uploading results into container
2025-03-01 14:50:12,206:INFO:Uploading model into container now
2025-03-01 14:50:12,206:INFO:_master_model_container: 5
2025-03-01 14:50:12,206:INFO:_display_container: 2
2025-03-01 14:50:12,206:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-03-01 14:50:12,206:INFO:create_model() successfully completed......................................
2025-03-01 14:50:12,281:INFO:SubProcess create_model() end ==================================
2025-03-01 14:50:12,281:INFO:Creating metrics dataframe
2025-03-01 14:50:12,283:INFO:Initializing Ridge Classifier
2025-03-01 14:50:12,283:INFO:Total runtime is 0.12230374415715538 minutes
2025-03-01 14:50:12,283:INFO:SubProcess create_model() called ==================================
2025-03-01 14:50:12,283:INFO:Initializing create_model()
2025-03-01 14:50:12,283:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EF5A7361D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:12,283:INFO:Checking exceptions
2025-03-01 14:50:12,283:INFO:Importing libraries
2025-03-01 14:50:12,283:INFO:Copying training dataset
2025-03-01 14:50:12,285:INFO:Defining folds
2025-03-01 14:50:12,285:INFO:Declaring metric variables
2025-03-01 14:50:12,285:INFO:Importing untrained model
2025-03-01 14:50:12,285:INFO:Ridge Classifier Imported successfully
2025-03-01 14:50:12,285:INFO:Starting cross validation
2025-03-01 14:50:12,290:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:50:12,369:INFO:Calculating mean and std
2025-03-01 14:50:12,369:INFO:Creating metrics dataframe
2025-03-01 14:50:12,369:INFO:Uploading results into container
2025-03-01 14:50:12,369:INFO:Uploading model into container now
2025-03-01 14:50:12,369:INFO:_master_model_container: 6
2025-03-01 14:50:12,369:INFO:_display_container: 2
2025-03-01 14:50:12,369:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2025-03-01 14:50:12,369:INFO:create_model() successfully completed......................................
2025-03-01 14:50:12,446:INFO:SubProcess create_model() end ==================================
2025-03-01 14:50:12,446:INFO:Creating metrics dataframe
2025-03-01 14:50:12,448:INFO:Initializing Random Forest Classifier
2025-03-01 14:50:12,448:INFO:Total runtime is 0.12505471706390384 minutes
2025-03-01 14:50:12,448:INFO:SubProcess create_model() called ==================================
2025-03-01 14:50:12,448:INFO:Initializing create_model()
2025-03-01 14:50:12,448:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EF5A7361D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:12,448:INFO:Checking exceptions
2025-03-01 14:50:12,448:INFO:Importing libraries
2025-03-01 14:50:12,448:INFO:Copying training dataset
2025-03-01 14:50:12,448:INFO:Defining folds
2025-03-01 14:50:12,448:INFO:Declaring metric variables
2025-03-01 14:50:12,448:INFO:Importing untrained model
2025-03-01 14:50:12,448:INFO:Random Forest Classifier Imported successfully
2025-03-01 14:50:12,448:INFO:Starting cross validation
2025-03-01 14:50:12,448:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:50:13,211:INFO:Calculating mean and std
2025-03-01 14:50:13,211:INFO:Creating metrics dataframe
2025-03-01 14:50:13,211:INFO:Uploading results into container
2025-03-01 14:50:13,211:INFO:Uploading model into container now
2025-03-01 14:50:13,211:INFO:_master_model_container: 7
2025-03-01 14:50:13,211:INFO:_display_container: 2
2025-03-01 14:50:13,214:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-03-01 14:50:13,214:INFO:create_model() successfully completed......................................
2025-03-01 14:50:13,286:INFO:SubProcess create_model() end ==================================
2025-03-01 14:50:13,286:INFO:Creating metrics dataframe
2025-03-01 14:50:13,286:INFO:Initializing Quadratic Discriminant Analysis
2025-03-01 14:50:13,286:INFO:Total runtime is 0.13901962041854862 minutes
2025-03-01 14:50:13,286:INFO:SubProcess create_model() called ==================================
2025-03-01 14:50:13,286:INFO:Initializing create_model()
2025-03-01 14:50:13,286:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EF5A7361D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:13,286:INFO:Checking exceptions
2025-03-01 14:50:13,286:INFO:Importing libraries
2025-03-01 14:50:13,286:INFO:Copying training dataset
2025-03-01 14:50:13,295:INFO:Defining folds
2025-03-01 14:50:13,295:INFO:Declaring metric variables
2025-03-01 14:50:13,295:INFO:Importing untrained model
2025-03-01 14:50:13,297:INFO:Quadratic Discriminant Analysis Imported successfully
2025-03-01 14:50:13,297:INFO:Starting cross validation
2025-03-01 14:50:13,297:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:50:13,347:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:50:13,347:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:50:13,347:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:50:13,347:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:50:13,347:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:50:13,387:INFO:Calculating mean and std
2025-03-01 14:50:13,387:INFO:Creating metrics dataframe
2025-03-01 14:50:13,387:INFO:Uploading results into container
2025-03-01 14:50:13,387:INFO:Uploading model into container now
2025-03-01 14:50:13,390:INFO:_master_model_container: 8
2025-03-01 14:50:13,390:INFO:_display_container: 2
2025-03-01 14:50:13,390:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-03-01 14:50:13,390:INFO:create_model() successfully completed......................................
2025-03-01 14:50:13,465:INFO:SubProcess create_model() end ==================================
2025-03-01 14:50:13,465:INFO:Creating metrics dataframe
2025-03-01 14:50:13,467:INFO:Initializing Ada Boost Classifier
2025-03-01 14:50:13,467:INFO:Total runtime is 0.1420322179794312 minutes
2025-03-01 14:50:13,467:INFO:SubProcess create_model() called ==================================
2025-03-01 14:50:13,467:INFO:Initializing create_model()
2025-03-01 14:50:13,467:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EF5A7361D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:13,467:INFO:Checking exceptions
2025-03-01 14:50:13,467:INFO:Importing libraries
2025-03-01 14:50:13,467:INFO:Copying training dataset
2025-03-01 14:50:13,467:INFO:Defining folds
2025-03-01 14:50:13,467:INFO:Declaring metric variables
2025-03-01 14:50:13,467:INFO:Importing untrained model
2025-03-01 14:50:13,467:INFO:Ada Boost Classifier Imported successfully
2025-03-01 14:50:13,467:INFO:Starting cross validation
2025-03-01 14:50:13,467:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:50:13,506:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:50:13,508:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:50:13,508:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:50:13,508:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:50:13,514:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:50:13,516:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:50:13,516:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:50:13,516:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:50:13,516:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:50:13,526:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:50:14,178:INFO:Calculating mean and std
2025-03-01 14:50:14,178:INFO:Creating metrics dataframe
2025-03-01 14:50:14,178:INFO:Uploading results into container
2025-03-01 14:50:14,178:INFO:Uploading model into container now
2025-03-01 14:50:14,178:INFO:_master_model_container: 9
2025-03-01 14:50:14,178:INFO:_display_container: 2
2025-03-01 14:50:14,178:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42)
2025-03-01 14:50:14,178:INFO:create_model() successfully completed......................................
2025-03-01 14:50:14,250:INFO:SubProcess create_model() end ==================================
2025-03-01 14:50:14,250:INFO:Creating metrics dataframe
2025-03-01 14:50:14,256:INFO:Initializing Gradient Boosting Classifier
2025-03-01 14:50:14,256:INFO:Total runtime is 0.1551951885223389 minutes
2025-03-01 14:50:14,256:INFO:SubProcess create_model() called ==================================
2025-03-01 14:50:14,256:INFO:Initializing create_model()
2025-03-01 14:50:14,256:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EF5A7361D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:14,256:INFO:Checking exceptions
2025-03-01 14:50:14,256:INFO:Importing libraries
2025-03-01 14:50:14,256:INFO:Copying training dataset
2025-03-01 14:50:14,261:INFO:Defining folds
2025-03-01 14:50:14,261:INFO:Declaring metric variables
2025-03-01 14:50:14,261:INFO:Importing untrained model
2025-03-01 14:50:14,261:INFO:Gradient Boosting Classifier Imported successfully
2025-03-01 14:50:14,261:INFO:Starting cross validation
2025-03-01 14:50:14,261:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:50:17,008:INFO:Calculating mean and std
2025-03-01 14:50:17,008:INFO:Creating metrics dataframe
2025-03-01 14:50:17,011:INFO:Uploading results into container
2025-03-01 14:50:17,011:INFO:Uploading model into container now
2025-03-01 14:50:17,011:INFO:_master_model_container: 10
2025-03-01 14:50:17,011:INFO:_display_container: 2
2025-03-01 14:50:17,011:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-03-01 14:50:17,011:INFO:create_model() successfully completed......................................
2025-03-01 14:50:17,085:INFO:SubProcess create_model() end ==================================
2025-03-01 14:50:17,085:INFO:Creating metrics dataframe
2025-03-01 14:50:17,086:INFO:Initializing Linear Discriminant Analysis
2025-03-01 14:50:17,086:INFO:Total runtime is 0.20235046545664473 minutes
2025-03-01 14:50:17,086:INFO:SubProcess create_model() called ==================================
2025-03-01 14:50:17,086:INFO:Initializing create_model()
2025-03-01 14:50:17,086:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EF5A7361D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:17,086:INFO:Checking exceptions
2025-03-01 14:50:17,086:INFO:Importing libraries
2025-03-01 14:50:17,086:INFO:Copying training dataset
2025-03-01 14:50:17,090:INFO:Defining folds
2025-03-01 14:50:17,090:INFO:Declaring metric variables
2025-03-01 14:50:17,090:INFO:Importing untrained model
2025-03-01 14:50:17,090:INFO:Linear Discriminant Analysis Imported successfully
2025-03-01 14:50:17,090:INFO:Starting cross validation
2025-03-01 14:50:17,090:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:50:17,175:INFO:Calculating mean and std
2025-03-01 14:50:17,175:INFO:Creating metrics dataframe
2025-03-01 14:50:17,176:INFO:Uploading results into container
2025-03-01 14:50:17,176:INFO:Uploading model into container now
2025-03-01 14:50:17,176:INFO:_master_model_container: 11
2025-03-01 14:50:17,176:INFO:_display_container: 2
2025-03-01 14:50:17,176:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-03-01 14:50:17,176:INFO:create_model() successfully completed......................................
2025-03-01 14:50:17,252:INFO:SubProcess create_model() end ==================================
2025-03-01 14:50:17,252:INFO:Creating metrics dataframe
2025-03-01 14:50:17,254:INFO:Initializing Extra Trees Classifier
2025-03-01 14:50:17,254:INFO:Total runtime is 0.205149519443512 minutes
2025-03-01 14:50:17,254:INFO:SubProcess create_model() called ==================================
2025-03-01 14:50:17,255:INFO:Initializing create_model()
2025-03-01 14:50:17,255:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EF5A7361D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:17,255:INFO:Checking exceptions
2025-03-01 14:50:17,255:INFO:Importing libraries
2025-03-01 14:50:17,255:INFO:Copying training dataset
2025-03-01 14:50:17,260:INFO:Defining folds
2025-03-01 14:50:17,260:INFO:Declaring metric variables
2025-03-01 14:50:17,260:INFO:Importing untrained model
2025-03-01 14:50:17,260:INFO:Extra Trees Classifier Imported successfully
2025-03-01 14:50:17,260:INFO:Starting cross validation
2025-03-01 14:50:17,260:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:50:17,733:INFO:Calculating mean and std
2025-03-01 14:50:17,733:INFO:Creating metrics dataframe
2025-03-01 14:50:17,736:INFO:Uploading results into container
2025-03-01 14:50:17,736:INFO:Uploading model into container now
2025-03-01 14:50:17,737:INFO:_master_model_container: 12
2025-03-01 14:50:17,737:INFO:_display_container: 2
2025-03-01 14:50:17,737:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False)
2025-03-01 14:50:17,737:INFO:create_model() successfully completed......................................
2025-03-01 14:50:17,810:INFO:SubProcess create_model() end ==================================
2025-03-01 14:50:17,810:INFO:Creating metrics dataframe
2025-03-01 14:50:17,812:INFO:Initializing Light Gradient Boosting Machine
2025-03-01 14:50:17,812:INFO:Total runtime is 0.21446199417114262 minutes
2025-03-01 14:50:17,812:INFO:SubProcess create_model() called ==================================
2025-03-01 14:50:17,812:INFO:Initializing create_model()
2025-03-01 14:50:17,812:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EF5A7361D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:17,812:INFO:Checking exceptions
2025-03-01 14:50:17,812:INFO:Importing libraries
2025-03-01 14:50:17,812:INFO:Copying training dataset
2025-03-01 14:50:17,818:INFO:Defining folds
2025-03-01 14:50:17,818:INFO:Declaring metric variables
2025-03-01 14:50:17,818:INFO:Importing untrained model
2025-03-01 14:50:17,818:INFO:Light Gradient Boosting Machine Imported successfully
2025-03-01 14:50:17,818:INFO:Starting cross validation
2025-03-01 14:50:17,819:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:50:18,998:INFO:Calculating mean and std
2025-03-01 14:50:18,998:INFO:Creating metrics dataframe
2025-03-01 14:50:18,998:INFO:Uploading results into container
2025-03-01 14:50:18,998:INFO:Uploading model into container now
2025-03-01 14:50:18,998:INFO:_master_model_container: 13
2025-03-01 14:50:18,998:INFO:_display_container: 2
2025-03-01 14:50:18,998:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-03-01 14:50:18,998:INFO:create_model() successfully completed......................................
2025-03-01 14:50:19,097:INFO:SubProcess create_model() end ==================================
2025-03-01 14:50:19,097:INFO:Creating metrics dataframe
2025-03-01 14:50:19,097:INFO:Initializing Dummy Classifier
2025-03-01 14:50:19,097:INFO:Total runtime is 0.23588044246037804 minutes
2025-03-01 14:50:19,097:INFO:SubProcess create_model() called ==================================
2025-03-01 14:50:19,097:INFO:Initializing create_model()
2025-03-01 14:50:19,097:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001EF5A7361D0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:19,097:INFO:Checking exceptions
2025-03-01 14:50:19,097:INFO:Importing libraries
2025-03-01 14:50:19,097:INFO:Copying training dataset
2025-03-01 14:50:19,105:INFO:Defining folds
2025-03-01 14:50:19,105:INFO:Declaring metric variables
2025-03-01 14:50:19,105:INFO:Importing untrained model
2025-03-01 14:50:19,105:INFO:Dummy Classifier Imported successfully
2025-03-01 14:50:19,105:INFO:Starting cross validation
2025-03-01 14:50:19,105:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:50:19,157:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:50:19,159:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:50:19,159:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:50:19,159:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:50:19,165:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:50:19,166:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:50:19,169:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:50:19,175:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:50:19,176:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:50:19,180:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:50:19,190:INFO:Calculating mean and std
2025-03-01 14:50:19,190:INFO:Creating metrics dataframe
2025-03-01 14:50:19,192:INFO:Uploading results into container
2025-03-01 14:50:19,192:INFO:Uploading model into container now
2025-03-01 14:50:19,192:INFO:_master_model_container: 14
2025-03-01 14:50:19,192:INFO:_display_container: 2
2025-03-01 14:50:19,192:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2025-03-01 14:50:19,192:INFO:create_model() successfully completed......................................
2025-03-01 14:50:19,266:INFO:SubProcess create_model() end ==================================
2025-03-01 14:50:19,266:INFO:Creating metrics dataframe
2025-03-01 14:50:19,269:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:339: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  .applymap(highlight_cols, subset=["TT (Sec)"])

2025-03-01 14:50:19,269:INFO:Initializing create_model()
2025-03-01 14:50:19,269:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:19,269:INFO:Checking exceptions
2025-03-01 14:50:19,269:INFO:Importing libraries
2025-03-01 14:50:19,269:INFO:Copying training dataset
2025-03-01 14:50:19,276:INFO:Defining folds
2025-03-01 14:50:19,276:INFO:Declaring metric variables
2025-03-01 14:50:19,276:INFO:Importing untrained model
2025-03-01 14:50:19,276:INFO:Declaring custom model
2025-03-01 14:50:19,276:INFO:Gradient Boosting Classifier Imported successfully
2025-03-01 14:50:19,276:INFO:Cross validation set to False
2025-03-01 14:50:19,276:INFO:Fitting Model
2025-03-01 14:50:21,656:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-03-01 14:50:21,656:INFO:create_model() successfully completed......................................
2025-03-01 14:50:21,731:INFO:Initializing create_model()
2025-03-01 14:50:21,731:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:21,731:INFO:Checking exceptions
2025-03-01 14:50:21,731:INFO:Importing libraries
2025-03-01 14:50:21,731:INFO:Copying training dataset
2025-03-01 14:50:21,735:INFO:Defining folds
2025-03-01 14:50:21,735:INFO:Declaring metric variables
2025-03-01 14:50:21,735:INFO:Importing untrained model
2025-03-01 14:50:21,735:INFO:Declaring custom model
2025-03-01 14:50:21,735:INFO:Random Forest Classifier Imported successfully
2025-03-01 14:50:21,735:INFO:Cross validation set to False
2025-03-01 14:50:21,735:INFO:Fitting Model
2025-03-01 14:50:21,893:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-03-01 14:50:21,893:INFO:create_model() successfully completed......................................
2025-03-01 14:50:21,968:INFO:Initializing create_model()
2025-03-01 14:50:21,968:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:21,968:INFO:Checking exceptions
2025-03-01 14:50:21,968:INFO:Importing libraries
2025-03-01 14:50:21,968:INFO:Copying training dataset
2025-03-01 14:50:21,968:INFO:Defining folds
2025-03-01 14:50:21,968:INFO:Declaring metric variables
2025-03-01 14:50:21,968:INFO:Importing untrained model
2025-03-01 14:50:21,968:INFO:Declaring custom model
2025-03-01 14:50:21,975:INFO:Ada Boost Classifier Imported successfully
2025-03-01 14:50:21,975:INFO:Cross validation set to False
2025-03-01 14:50:21,975:INFO:Fitting Model
2025-03-01 14:50:21,976:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:50:22,507:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42)
2025-03-01 14:50:22,507:INFO:create_model() successfully completed......................................
2025-03-01 14:50:22,576:INFO:Initializing create_model()
2025-03-01 14:50:22,576:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:22,576:INFO:Checking exceptions
2025-03-01 14:50:22,576:INFO:Importing libraries
2025-03-01 14:50:22,576:INFO:Copying training dataset
2025-03-01 14:50:22,585:INFO:Defining folds
2025-03-01 14:50:22,585:INFO:Declaring metric variables
2025-03-01 14:50:22,585:INFO:Importing untrained model
2025-03-01 14:50:22,585:INFO:Declaring custom model
2025-03-01 14:50:22,585:INFO:Decision Tree Classifier Imported successfully
2025-03-01 14:50:22,585:INFO:Cross validation set to False
2025-03-01 14:50:22,585:INFO:Fitting Model
2025-03-01 14:50:22,620:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best')
2025-03-01 14:50:22,620:INFO:create_model() successfully completed......................................
2025-03-01 14:50:22,687:INFO:Initializing create_model()
2025-03-01 14:50:22,687:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EF4BED0790>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:50:22,687:INFO:Checking exceptions
2025-03-01 14:50:22,687:INFO:Importing libraries
2025-03-01 14:50:22,687:INFO:Copying training dataset
2025-03-01 14:50:22,697:INFO:Defining folds
2025-03-01 14:50:22,697:INFO:Declaring metric variables
2025-03-01 14:50:22,697:INFO:Importing untrained model
2025-03-01 14:50:22,697:INFO:Declaring custom model
2025-03-01 14:50:22,697:INFO:Light Gradient Boosting Machine Imported successfully
2025-03-01 14:50:22,697:INFO:Cross validation set to False
2025-03-01 14:50:22,697:INFO:Fitting Model
2025-03-01 14:50:22,715:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-03-01 14:50:22,715:INFO:[LightGBM] [Info] Number of positive: 2752, number of negative: 2752
2025-03-01 14:50:22,715:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000476 seconds.
2025-03-01 14:50:22,715:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-03-01 14:50:22,725:INFO:[LightGBM] [Info] Total Bins 4631
2025-03-01 14:50:22,725:INFO:[LightGBM] [Info] Number of data points in the train set: 5504, number of used features: 20
2025-03-01 14:50:22,725:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2025-03-01 14:50:22,726:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,727:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,727:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,728:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,728:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,729:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,730:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,730:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,731:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,731:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,732:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,732:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,733:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,733:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,735:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,736:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,736:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,736:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,736:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:50:22,787:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-03-01 14:50:22,787:INFO:create_model() successfully completed......................................
2025-03-01 14:50:22,876:INFO:_master_model_container: 14
2025-03-01 14:50:22,876:INFO:_display_container: 2
2025-03-01 14:50:22,876:INFO:[GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42), DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best'), LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)]
2025-03-01 14:50:22,876:INFO:compare_models() successfully completed......................................
2025-03-01 14:50:22,887:INFO:Initializing save_model()
2025-03-01 14:50:22,887:INFO:save_model(model=[GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42), DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best'), LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)], model_name=models//best_pycaret_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\mfira\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Absolute Magnitude',
                                             'Est Dia in KM(min)',
                                             'Est Dia in KM(max)',
                                             'Relative Velocity km per sec',
                                             'Miss Dist.(Astron...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-03-01 14:50:22,887:INFO:Adding model into prep_pipe
2025-03-01 14:50:22,925:INFO:models//best_pycaret_model.pkl saved in current working directory
2025-03-01 14:50:22,937:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Absolute Magnitude',
                                             'Est Dia in KM(min)',
                                             'Est Dia in KM(max)',
                                             'Relative Velocity km per sec',
                                             'Miss Dist.(Astronomical)',
                                             'Orbiting Body',
                                             'Orbit Uncertaini...
                  LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                 colsample_bytree=1.0, importance_type='split',
                                 learning_rate=0.1, max_depth=-1,
                                 min_child_samples=20, min_child_weight=0.001,
                                 min_split_gain=0.0, n_estimators=100,
                                 n_jobs=-1, num_leaves=31, objective=None,
                                 random_state=42, reg_alpha=0.0, reg_lambda=0.0,
                                 subsample=1.0, subsample_for_bin=200000,
                                 subsample_freq=0)])],
         verbose=False)
2025-03-01 14:50:22,937:INFO:save_model() successfully completed......................................
2025-03-01 14:56:00,205:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:56:00,205:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:56:00,205:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:56:00,205:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-03-01 14:56:00,887:WARNING:D:\AstroGaurd\src\eda.py:28: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.countplot(x=df["Hazardous"], palette="viridis")

2025-03-01 14:56:01,843:INFO:PyCaret ClassificationExperiment
2025-03-01 14:56:01,843:INFO:Logging name: clf-default-name
2025-03-01 14:56:01,843:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-03-01 14:56:01,843:INFO:version 3.3.2
2025-03-01 14:56:01,843:INFO:Initializing setup()
2025-03-01 14:56:01,843:INFO:self.USI: 901f
2025-03-01 14:56:01,843:INFO:self._variable_keys: {'n_jobs_param', 'data', 'idx', 'X_test', 'exp_name_log', 'target_param', 'y_train', 'memory', 'log_plots_param', 'fold_groups_param', '_available_plots', 'gpu_param', '_ml_usecase', 'X', 'fold_generator', 'exp_id', 'pipeline', 'gpu_n_jobs_param', 'fix_imbalance', 'seed', 'y_test', 'X_train', 'USI', 'fold_shuffle_param', 'logging_param', 'y', 'is_multiclass', 'html_param'}
2025-03-01 14:56:01,843:INFO:Checking environment
2025-03-01 14:56:01,845:INFO:python_version: 3.11.7
2025-03-01 14:56:01,845:INFO:python_build: ('tags/v3.11.7:fa7a6f2', 'Dec  4 2023 19:24:49')
2025-03-01 14:56:01,845:INFO:machine: AMD64
2025-03-01 14:56:01,853:INFO:platform: Windows-10-10.0.22631-SP0
2025-03-01 14:56:01,860:INFO:Memory: svmem(total=16369410048, available=2702286848, percent=83.5, used=13667123200, free=2702286848)
2025-03-01 14:56:01,860:INFO:Physical Core: 8
2025-03-01 14:56:01,860:INFO:Logical Core: 16
2025-03-01 14:56:01,860:INFO:Checking libraries
2025-03-01 14:56:01,860:INFO:System:
2025-03-01 14:56:01,860:INFO:    python: 3.11.7 (tags/v3.11.7:fa7a6f2, Dec  4 2023, 19:24:49) [MSC v.1937 64 bit (AMD64)]
2025-03-01 14:56:01,860:INFO:executable: C:\Users\mfira\AppData\Local\Programs\Python\Python311\python.exe
2025-03-01 14:56:01,860:INFO:   machine: Windows-10-10.0.22631-SP0
2025-03-01 14:56:01,860:INFO:PyCaret required dependencies:
2025-03-01 14:56:01,907:INFO:                 pip: 25.0
2025-03-01 14:56:01,907:INFO:          setuptools: 75.6.0
2025-03-01 14:56:01,907:INFO:             pycaret: 3.3.2
2025-03-01 14:56:01,907:INFO:             IPython: 8.32.0
2025-03-01 14:56:01,907:INFO:          ipywidgets: 8.1.5
2025-03-01 14:56:01,907:INFO:                tqdm: 4.67.0
2025-03-01 14:56:01,907:INFO:               numpy: 1.26.4
2025-03-01 14:56:01,907:INFO:              pandas: 2.1.4
2025-03-01 14:56:01,907:INFO:              jinja2: 3.1.5
2025-03-01 14:56:01,907:INFO:               scipy: 1.11.4
2025-03-01 14:56:01,907:INFO:              joblib: 1.3.2
2025-03-01 14:56:01,907:INFO:             sklearn: 1.4.2
2025-03-01 14:56:01,907:INFO:                pyod: 2.0.3
2025-03-01 14:56:01,907:INFO:            imblearn: 0.13.0
2025-03-01 14:56:01,907:INFO:   category_encoders: 2.7.0
2025-03-01 14:56:01,907:INFO:            lightgbm: 4.6.0
2025-03-01 14:56:01,907:INFO:               numba: 0.61.0
2025-03-01 14:56:01,907:INFO:            requests: 2.32.3
2025-03-01 14:56:01,907:INFO:          matplotlib: 3.7.5
2025-03-01 14:56:01,907:INFO:          scikitplot: 0.3.7
2025-03-01 14:56:01,907:INFO:         yellowbrick: 1.5
2025-03-01 14:56:01,907:INFO:              plotly: 6.0.0
2025-03-01 14:56:01,907:INFO:    plotly-resampler: Not installed
2025-03-01 14:56:01,907:INFO:             kaleido: 0.2.1
2025-03-01 14:56:01,907:INFO:           schemdraw: 0.15
2025-03-01 14:56:01,907:INFO:         statsmodels: 0.14.4
2025-03-01 14:56:01,907:INFO:              sktime: 0.26.0
2025-03-01 14:56:01,907:INFO:               tbats: 1.1.3
2025-03-01 14:56:01,907:INFO:            pmdarima: 2.0.4
2025-03-01 14:56:01,907:INFO:              psutil: 6.1.1
2025-03-01 14:56:01,912:INFO:          markupsafe: 3.0.2
2025-03-01 14:56:01,912:INFO:             pickle5: Not installed
2025-03-01 14:56:01,912:INFO:         cloudpickle: 3.1.0
2025-03-01 14:56:01,913:INFO:         deprecation: 2.1.0
2025-03-01 14:56:01,913:INFO:              xxhash: 3.5.0
2025-03-01 14:56:01,913:INFO:           wurlitzer: Not installed
2025-03-01 14:56:01,913:INFO:PyCaret optional dependencies:
2025-03-01 14:56:01,928:INFO:                shap: Not installed
2025-03-01 14:56:01,928:INFO:           interpret: Not installed
2025-03-01 14:56:01,928:INFO:                umap: Not installed
2025-03-01 14:56:01,928:INFO:     ydata_profiling: Not installed
2025-03-01 14:56:01,928:INFO:  explainerdashboard: Not installed
2025-03-01 14:56:01,928:INFO:             autoviz: Not installed
2025-03-01 14:56:01,928:INFO:           fairlearn: Not installed
2025-03-01 14:56:01,928:INFO:          deepchecks: Not installed
2025-03-01 14:56:01,928:INFO:             xgboost: Not installed
2025-03-01 14:56:01,928:INFO:            catboost: Not installed
2025-03-01 14:56:01,928:INFO:              kmodes: Not installed
2025-03-01 14:56:01,928:INFO:             mlxtend: Not installed
2025-03-01 14:56:01,928:INFO:       statsforecast: Not installed
2025-03-01 14:56:01,928:INFO:        tune_sklearn: Not installed
2025-03-01 14:56:01,928:INFO:                 ray: Not installed
2025-03-01 14:56:01,928:INFO:            hyperopt: Not installed
2025-03-01 14:56:01,928:INFO:              optuna: Not installed
2025-03-01 14:56:01,928:INFO:               skopt: Not installed
2025-03-01 14:56:01,928:INFO:              mlflow: Not installed
2025-03-01 14:56:01,928:INFO:              gradio: Not installed
2025-03-01 14:56:01,928:INFO:             fastapi: Not installed
2025-03-01 14:56:01,928:INFO:             uvicorn: Not installed
2025-03-01 14:56:01,928:INFO:              m2cgen: Not installed
2025-03-01 14:56:01,928:INFO:           evidently: Not installed
2025-03-01 14:56:01,928:INFO:               fugue: Not installed
2025-03-01 14:56:01,928:INFO:           streamlit: 1.42.0
2025-03-01 14:56:01,928:INFO:             prophet: 1.1.6
2025-03-01 14:56:01,928:INFO:None
2025-03-01 14:56:01,928:INFO:Set up data.
2025-03-01 14:56:01,937:INFO:Set up folding strategy.
2025-03-01 14:56:01,937:INFO:Set up train/test split.
2025-03-01 14:56:01,944:INFO:Set up index.
2025-03-01 14:56:01,944:INFO:Assigning column types.
2025-03-01 14:56:01,950:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-03-01 14:56:01,980:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-01 14:56:01,983:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-01 14:56:02,008:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:56:02,008:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:56:02,036:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-03-01 14:56:02,036:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-01 14:56:02,057:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:56:02,058:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:56:02,058:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-03-01 14:56:02,089:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-01 14:56:02,107:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:56:02,108:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:56:02,138:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-03-01 14:56:02,157:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:56:02,157:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:56:02,157:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-03-01 14:56:02,206:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:56:02,207:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:56:02,255:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:56:02,255:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:56:02,258:INFO:Preparing preprocessing pipeline...
2025-03-01 14:56:02,259:INFO:Set up label encoding.
2025-03-01 14:56:02,259:INFO:Set up simple imputation.
2025-03-01 14:56:02,259:INFO:Set up feature normalization.
2025-03-01 14:56:02,260:INFO:Set up column name cleaning.
2025-03-01 14:56:02,291:INFO:Finished creating preprocessing pipeline.
2025-03-01 14:56:02,297:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\mfira\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Absolute Magnitude',
                                             'Est Dia in KM(min)',
                                             'Est Dia in KM(max)',
                                             'Relative Velocity km per sec',
                                             'Miss Dist.(Astron...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-03-01 14:56:02,297:INFO:Creating final display dataframe.
2025-03-01 14:56:02,391:INFO:Setup _display_container:                     Description             Value
0                    Session id                42
1                        Target         Hazardous
2                   Target type            Binary
3                Target mapping       -1: 0, 1: 1
4           Original data shape        (7864, 22)
5        Transformed data shape        (7864, 22)
6   Transformed train set shape        (5504, 22)
7    Transformed test set shape        (2360, 22)
8              Numeric features                21
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13                    Normalize              True
14             Normalize method            zscore
15               Fold Generator   StratifiedKFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  clf-default-name
21                          USI              901f
2025-03-01 14:56:02,442:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:56:02,445:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:56:02,495:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:56:02,495:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-03-01 14:56:02,496:INFO:setup() successfully completed in 0.65s...............
2025-03-01 14:56:02,496:INFO:Initializing compare_models()
2025-03-01 14:56:02,496:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=5, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 5, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-03-01 14:56:02,496:INFO:Checking exceptions
2025-03-01 14:56:02,497:INFO:Preparing display monitor
2025-03-01 14:56:02,502:INFO:Initializing Logistic Regression
2025-03-01 14:56:02,502:INFO:Total runtime is 0.0 minutes
2025-03-01 14:56:02,504:INFO:SubProcess create_model() called ==================================
2025-03-01 14:56:02,504:INFO:Initializing create_model()
2025-03-01 14:56:02,504:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002407863EE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:02,504:INFO:Checking exceptions
2025-03-01 14:56:02,504:INFO:Importing libraries
2025-03-01 14:56:02,504:INFO:Copying training dataset
2025-03-01 14:56:02,509:INFO:Defining folds
2025-03-01 14:56:02,509:INFO:Declaring metric variables
2025-03-01 14:56:02,509:INFO:Importing untrained model
2025-03-01 14:56:02,509:INFO:Logistic Regression Imported successfully
2025-03-01 14:56:02,509:INFO:Starting cross validation
2025-03-01 14:56:02,509:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:56:07,372:INFO:Calculating mean and std
2025-03-01 14:56:07,372:INFO:Creating metrics dataframe
2025-03-01 14:56:07,375:INFO:Uploading results into container
2025-03-01 14:56:07,375:INFO:Uploading model into container now
2025-03-01 14:56:07,375:INFO:_master_model_container: 1
2025-03-01 14:56:07,375:INFO:_display_container: 2
2025-03-01 14:56:07,375:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-03-01 14:56:07,375:INFO:create_model() successfully completed......................................
2025-03-01 14:56:07,490:INFO:SubProcess create_model() end ==================================
2025-03-01 14:56:07,490:INFO:Creating metrics dataframe
2025-03-01 14:56:07,494:INFO:Initializing K Neighbors Classifier
2025-03-01 14:56:07,494:INFO:Total runtime is 0.08319413264592489 minutes
2025-03-01 14:56:07,494:INFO:SubProcess create_model() called ==================================
2025-03-01 14:56:07,494:INFO:Initializing create_model()
2025-03-01 14:56:07,494:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002407863EE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:07,494:INFO:Checking exceptions
2025-03-01 14:56:07,494:INFO:Importing libraries
2025-03-01 14:56:07,494:INFO:Copying training dataset
2025-03-01 14:56:07,497:INFO:Defining folds
2025-03-01 14:56:07,497:INFO:Declaring metric variables
2025-03-01 14:56:07,497:INFO:Importing untrained model
2025-03-01 14:56:07,497:INFO:K Neighbors Classifier Imported successfully
2025-03-01 14:56:07,497:INFO:Starting cross validation
2025-03-01 14:56:07,497:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:56:09,970:INFO:Calculating mean and std
2025-03-01 14:56:09,970:INFO:Creating metrics dataframe
2025-03-01 14:56:09,970:INFO:Uploading results into container
2025-03-01 14:56:09,975:INFO:Uploading model into container now
2025-03-01 14:56:09,975:INFO:_master_model_container: 2
2025-03-01 14:56:09,975:INFO:_display_container: 2
2025-03-01 14:56:09,975:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-03-01 14:56:09,975:INFO:create_model() successfully completed......................................
2025-03-01 14:56:10,079:INFO:SubProcess create_model() end ==================================
2025-03-01 14:56:10,079:INFO:Creating metrics dataframe
2025-03-01 14:56:10,079:INFO:Initializing Naive Bayes
2025-03-01 14:56:10,079:INFO:Total runtime is 0.12627787987391154 minutes
2025-03-01 14:56:10,079:INFO:SubProcess create_model() called ==================================
2025-03-01 14:56:10,079:INFO:Initializing create_model()
2025-03-01 14:56:10,079:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002407863EE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:10,079:INFO:Checking exceptions
2025-03-01 14:56:10,079:INFO:Importing libraries
2025-03-01 14:56:10,079:INFO:Copying training dataset
2025-03-01 14:56:10,086:INFO:Defining folds
2025-03-01 14:56:10,086:INFO:Declaring metric variables
2025-03-01 14:56:10,086:INFO:Importing untrained model
2025-03-01 14:56:10,086:INFO:Naive Bayes Imported successfully
2025-03-01 14:56:10,090:INFO:Starting cross validation
2025-03-01 14:56:10,090:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:56:10,169:INFO:Calculating mean and std
2025-03-01 14:56:10,169:INFO:Creating metrics dataframe
2025-03-01 14:56:10,169:INFO:Uploading results into container
2025-03-01 14:56:10,169:INFO:Uploading model into container now
2025-03-01 14:56:10,169:INFO:_master_model_container: 3
2025-03-01 14:56:10,169:INFO:_display_container: 2
2025-03-01 14:56:10,169:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-03-01 14:56:10,169:INFO:create_model() successfully completed......................................
2025-03-01 14:56:10,241:INFO:SubProcess create_model() end ==================================
2025-03-01 14:56:10,243:INFO:Creating metrics dataframe
2025-03-01 14:56:10,244:INFO:Initializing Decision Tree Classifier
2025-03-01 14:56:10,244:INFO:Total runtime is 0.1290327509244283 minutes
2025-03-01 14:56:10,245:INFO:SubProcess create_model() called ==================================
2025-03-01 14:56:10,245:INFO:Initializing create_model()
2025-03-01 14:56:10,245:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002407863EE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:10,245:INFO:Checking exceptions
2025-03-01 14:56:10,245:INFO:Importing libraries
2025-03-01 14:56:10,245:INFO:Copying training dataset
2025-03-01 14:56:10,246:INFO:Defining folds
2025-03-01 14:56:10,246:INFO:Declaring metric variables
2025-03-01 14:56:10,246:INFO:Importing untrained model
2025-03-01 14:56:10,252:INFO:Decision Tree Classifier Imported successfully
2025-03-01 14:56:10,252:INFO:Starting cross validation
2025-03-01 14:56:10,252:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:56:10,353:INFO:Calculating mean and std
2025-03-01 14:56:10,353:INFO:Creating metrics dataframe
2025-03-01 14:56:10,356:INFO:Uploading results into container
2025-03-01 14:56:10,356:INFO:Uploading model into container now
2025-03-01 14:56:10,356:INFO:_master_model_container: 4
2025-03-01 14:56:10,356:INFO:_display_container: 2
2025-03-01 14:56:10,356:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best')
2025-03-01 14:56:10,356:INFO:create_model() successfully completed......................................
2025-03-01 14:56:10,429:INFO:SubProcess create_model() end ==================================
2025-03-01 14:56:10,429:INFO:Creating metrics dataframe
2025-03-01 14:56:10,429:INFO:Initializing SVM - Linear Kernel
2025-03-01 14:56:10,429:INFO:Total runtime is 0.13212113777796428 minutes
2025-03-01 14:56:10,429:INFO:SubProcess create_model() called ==================================
2025-03-01 14:56:10,429:INFO:Initializing create_model()
2025-03-01 14:56:10,429:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002407863EE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:10,429:INFO:Checking exceptions
2025-03-01 14:56:10,429:INFO:Importing libraries
2025-03-01 14:56:10,429:INFO:Copying training dataset
2025-03-01 14:56:10,436:INFO:Defining folds
2025-03-01 14:56:10,436:INFO:Declaring metric variables
2025-03-01 14:56:10,437:INFO:Importing untrained model
2025-03-01 14:56:10,437:INFO:SVM - Linear Kernel Imported successfully
2025-03-01 14:56:10,437:INFO:Starting cross validation
2025-03-01 14:56:10,437:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:56:10,518:INFO:Calculating mean and std
2025-03-01 14:56:10,518:INFO:Creating metrics dataframe
2025-03-01 14:56:10,518:INFO:Uploading results into container
2025-03-01 14:56:10,518:INFO:Uploading model into container now
2025-03-01 14:56:10,518:INFO:_master_model_container: 5
2025-03-01 14:56:10,518:INFO:_display_container: 2
2025-03-01 14:56:10,518:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=42, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-03-01 14:56:10,518:INFO:create_model() successfully completed......................................
2025-03-01 14:56:10,595:INFO:SubProcess create_model() end ==================================
2025-03-01 14:56:10,595:INFO:Creating metrics dataframe
2025-03-01 14:56:10,596:INFO:Initializing Ridge Classifier
2025-03-01 14:56:10,596:INFO:Total runtime is 0.13489747047424316 minutes
2025-03-01 14:56:10,596:INFO:SubProcess create_model() called ==================================
2025-03-01 14:56:10,597:INFO:Initializing create_model()
2025-03-01 14:56:10,597:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002407863EE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:10,597:INFO:Checking exceptions
2025-03-01 14:56:10,597:INFO:Importing libraries
2025-03-01 14:56:10,597:INFO:Copying training dataset
2025-03-01 14:56:10,601:INFO:Defining folds
2025-03-01 14:56:10,601:INFO:Declaring metric variables
2025-03-01 14:56:10,601:INFO:Importing untrained model
2025-03-01 14:56:10,601:INFO:Ridge Classifier Imported successfully
2025-03-01 14:56:10,601:INFO:Starting cross validation
2025-03-01 14:56:10,601:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:56:10,683:INFO:Calculating mean and std
2025-03-01 14:56:10,683:INFO:Creating metrics dataframe
2025-03-01 14:56:10,685:INFO:Uploading results into container
2025-03-01 14:56:10,685:INFO:Uploading model into container now
2025-03-01 14:56:10,686:INFO:_master_model_container: 6
2025-03-01 14:56:10,686:INFO:_display_container: 2
2025-03-01 14:56:10,686:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=42, solver='auto',
                tol=0.0001)
2025-03-01 14:56:10,686:INFO:create_model() successfully completed......................................
2025-03-01 14:56:10,757:INFO:SubProcess create_model() end ==================================
2025-03-01 14:56:10,757:INFO:Creating metrics dataframe
2025-03-01 14:56:10,757:INFO:Initializing Random Forest Classifier
2025-03-01 14:56:10,757:INFO:Total runtime is 0.1375776727994283 minutes
2025-03-01 14:56:10,757:INFO:SubProcess create_model() called ==================================
2025-03-01 14:56:10,757:INFO:Initializing create_model()
2025-03-01 14:56:10,757:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002407863EE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:10,757:INFO:Checking exceptions
2025-03-01 14:56:10,757:INFO:Importing libraries
2025-03-01 14:56:10,757:INFO:Copying training dataset
2025-03-01 14:56:10,770:INFO:Defining folds
2025-03-01 14:56:10,770:INFO:Declaring metric variables
2025-03-01 14:56:10,770:INFO:Importing untrained model
2025-03-01 14:56:10,770:INFO:Random Forest Classifier Imported successfully
2025-03-01 14:56:10,770:INFO:Starting cross validation
2025-03-01 14:56:10,770:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:56:11,537:INFO:Calculating mean and std
2025-03-01 14:56:11,538:INFO:Creating metrics dataframe
2025-03-01 14:56:11,538:INFO:Uploading results into container
2025-03-01 14:56:11,538:INFO:Uploading model into container now
2025-03-01 14:56:11,538:INFO:_master_model_container: 7
2025-03-01 14:56:11,538:INFO:_display_container: 2
2025-03-01 14:56:11,538:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-03-01 14:56:11,538:INFO:create_model() successfully completed......................................
2025-03-01 14:56:11,608:INFO:SubProcess create_model() end ==================================
2025-03-01 14:56:11,612:INFO:Creating metrics dataframe
2025-03-01 14:56:11,612:INFO:Initializing Quadratic Discriminant Analysis
2025-03-01 14:56:11,612:INFO:Total runtime is 0.15184311866760256 minutes
2025-03-01 14:56:11,612:INFO:SubProcess create_model() called ==================================
2025-03-01 14:56:11,612:INFO:Initializing create_model()
2025-03-01 14:56:11,612:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002407863EE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:11,612:INFO:Checking exceptions
2025-03-01 14:56:11,612:INFO:Importing libraries
2025-03-01 14:56:11,612:INFO:Copying training dataset
2025-03-01 14:56:11,618:INFO:Defining folds
2025-03-01 14:56:11,618:INFO:Declaring metric variables
2025-03-01 14:56:11,618:INFO:Importing untrained model
2025-03-01 14:56:11,618:INFO:Quadratic Discriminant Analysis Imported successfully
2025-03-01 14:56:11,618:INFO:Starting cross validation
2025-03-01 14:56:11,618:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:56:11,664:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:56:11,665:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:56:11,665:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:56:11,665:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:56:11,665:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:56:11,668:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:56:11,668:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:56:11,680:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:56:11,680:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:56:11,680:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-03-01 14:56:11,699:INFO:Calculating mean and std
2025-03-01 14:56:11,699:INFO:Creating metrics dataframe
2025-03-01 14:56:11,699:INFO:Uploading results into container
2025-03-01 14:56:11,699:INFO:Uploading model into container now
2025-03-01 14:56:11,699:INFO:_master_model_container: 8
2025-03-01 14:56:11,699:INFO:_display_container: 2
2025-03-01 14:56:11,699:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-03-01 14:56:11,699:INFO:create_model() successfully completed......................................
2025-03-01 14:56:11,775:INFO:SubProcess create_model() end ==================================
2025-03-01 14:56:11,775:INFO:Creating metrics dataframe
2025-03-01 14:56:11,777:INFO:Initializing Ada Boost Classifier
2025-03-01 14:56:11,777:INFO:Total runtime is 0.15458548069000247 minutes
2025-03-01 14:56:11,777:INFO:SubProcess create_model() called ==================================
2025-03-01 14:56:11,777:INFO:Initializing create_model()
2025-03-01 14:56:11,777:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002407863EE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:11,777:INFO:Checking exceptions
2025-03-01 14:56:11,777:INFO:Importing libraries
2025-03-01 14:56:11,777:INFO:Copying training dataset
2025-03-01 14:56:11,781:INFO:Defining folds
2025-03-01 14:56:11,781:INFO:Declaring metric variables
2025-03-01 14:56:11,781:INFO:Importing untrained model
2025-03-01 14:56:11,781:INFO:Ada Boost Classifier Imported successfully
2025-03-01 14:56:11,781:INFO:Starting cross validation
2025-03-01 14:56:11,781:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:56:11,816:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:56:11,816:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:56:11,823:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:56:11,825:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:56:11,825:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:56:11,828:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:56:11,831:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:56:11,831:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:56:11,835:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:56:12,489:INFO:Calculating mean and std
2025-03-01 14:56:12,489:INFO:Creating metrics dataframe
2025-03-01 14:56:12,489:INFO:Uploading results into container
2025-03-01 14:56:12,489:INFO:Uploading model into container now
2025-03-01 14:56:12,489:INFO:_master_model_container: 9
2025-03-01 14:56:12,489:INFO:_display_container: 2
2025-03-01 14:56:12,489:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42)
2025-03-01 14:56:12,489:INFO:create_model() successfully completed......................................
2025-03-01 14:56:12,565:INFO:SubProcess create_model() end ==================================
2025-03-01 14:56:12,566:INFO:Creating metrics dataframe
2025-03-01 14:56:12,567:INFO:Initializing Gradient Boosting Classifier
2025-03-01 14:56:12,567:INFO:Total runtime is 0.1677458961804708 minutes
2025-03-01 14:56:12,567:INFO:SubProcess create_model() called ==================================
2025-03-01 14:56:12,567:INFO:Initializing create_model()
2025-03-01 14:56:12,567:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002407863EE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:12,567:INFO:Checking exceptions
2025-03-01 14:56:12,567:INFO:Importing libraries
2025-03-01 14:56:12,567:INFO:Copying training dataset
2025-03-01 14:56:12,567:INFO:Defining folds
2025-03-01 14:56:12,567:INFO:Declaring metric variables
2025-03-01 14:56:12,567:INFO:Importing untrained model
2025-03-01 14:56:12,567:INFO:Gradient Boosting Classifier Imported successfully
2025-03-01 14:56:12,567:INFO:Starting cross validation
2025-03-01 14:56:12,574:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:56:15,240:INFO:Calculating mean and std
2025-03-01 14:56:15,240:INFO:Creating metrics dataframe
2025-03-01 14:56:15,240:INFO:Uploading results into container
2025-03-01 14:56:15,240:INFO:Uploading model into container now
2025-03-01 14:56:15,240:INFO:_master_model_container: 10
2025-03-01 14:56:15,240:INFO:_display_container: 2
2025-03-01 14:56:15,240:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-03-01 14:56:15,240:INFO:create_model() successfully completed......................................
2025-03-01 14:56:15,316:INFO:SubProcess create_model() end ==================================
2025-03-01 14:56:15,316:INFO:Creating metrics dataframe
2025-03-01 14:56:15,319:INFO:Initializing Linear Discriminant Analysis
2025-03-01 14:56:15,319:INFO:Total runtime is 0.21361713012059533 minutes
2025-03-01 14:56:15,319:INFO:SubProcess create_model() called ==================================
2025-03-01 14:56:15,319:INFO:Initializing create_model()
2025-03-01 14:56:15,319:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002407863EE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:15,319:INFO:Checking exceptions
2025-03-01 14:56:15,319:INFO:Importing libraries
2025-03-01 14:56:15,319:INFO:Copying training dataset
2025-03-01 14:56:15,325:INFO:Defining folds
2025-03-01 14:56:15,325:INFO:Declaring metric variables
2025-03-01 14:56:15,325:INFO:Importing untrained model
2025-03-01 14:56:15,325:INFO:Linear Discriminant Analysis Imported successfully
2025-03-01 14:56:15,325:INFO:Starting cross validation
2025-03-01 14:56:15,326:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:56:15,406:INFO:Calculating mean and std
2025-03-01 14:56:15,406:INFO:Creating metrics dataframe
2025-03-01 14:56:15,407:INFO:Uploading results into container
2025-03-01 14:56:15,407:INFO:Uploading model into container now
2025-03-01 14:56:15,407:INFO:_master_model_container: 11
2025-03-01 14:56:15,407:INFO:_display_container: 2
2025-03-01 14:56:15,407:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-03-01 14:56:15,407:INFO:create_model() successfully completed......................................
2025-03-01 14:56:15,477:INFO:SubProcess create_model() end ==================================
2025-03-01 14:56:15,477:INFO:Creating metrics dataframe
2025-03-01 14:56:15,477:INFO:Initializing Extra Trees Classifier
2025-03-01 14:56:15,477:INFO:Total runtime is 0.2162452618281047 minutes
2025-03-01 14:56:15,477:INFO:SubProcess create_model() called ==================================
2025-03-01 14:56:15,477:INFO:Initializing create_model()
2025-03-01 14:56:15,477:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002407863EE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:15,477:INFO:Checking exceptions
2025-03-01 14:56:15,477:INFO:Importing libraries
2025-03-01 14:56:15,477:INFO:Copying training dataset
2025-03-01 14:56:15,486:INFO:Defining folds
2025-03-01 14:56:15,486:INFO:Declaring metric variables
2025-03-01 14:56:15,486:INFO:Importing untrained model
2025-03-01 14:56:15,486:INFO:Extra Trees Classifier Imported successfully
2025-03-01 14:56:15,486:INFO:Starting cross validation
2025-03-01 14:56:15,486:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:56:15,952:INFO:Calculating mean and std
2025-03-01 14:56:15,953:INFO:Creating metrics dataframe
2025-03-01 14:56:15,954:INFO:Uploading results into container
2025-03-01 14:56:15,954:INFO:Uploading model into container now
2025-03-01 14:56:15,954:INFO:_master_model_container: 12
2025-03-01 14:56:15,954:INFO:_display_container: 2
2025-03-01 14:56:15,955:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=42, verbose=0,
                     warm_start=False)
2025-03-01 14:56:15,955:INFO:create_model() successfully completed......................................
2025-03-01 14:56:16,026:INFO:SubProcess create_model() end ==================================
2025-03-01 14:56:16,026:INFO:Creating metrics dataframe
2025-03-01 14:56:16,026:INFO:Initializing Light Gradient Boosting Machine
2025-03-01 14:56:16,026:INFO:Total runtime is 0.22540732224782312 minutes
2025-03-01 14:56:16,026:INFO:SubProcess create_model() called ==================================
2025-03-01 14:56:16,026:INFO:Initializing create_model()
2025-03-01 14:56:16,026:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002407863EE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:16,026:INFO:Checking exceptions
2025-03-01 14:56:16,026:INFO:Importing libraries
2025-03-01 14:56:16,026:INFO:Copying training dataset
2025-03-01 14:56:16,026:INFO:Defining folds
2025-03-01 14:56:16,026:INFO:Declaring metric variables
2025-03-01 14:56:16,035:INFO:Importing untrained model
2025-03-01 14:56:16,035:INFO:Light Gradient Boosting Machine Imported successfully
2025-03-01 14:56:16,035:INFO:Starting cross validation
2025-03-01 14:56:16,035:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:56:17,093:INFO:Calculating mean and std
2025-03-01 14:56:17,094:INFO:Creating metrics dataframe
2025-03-01 14:56:17,096:INFO:Uploading results into container
2025-03-01 14:56:17,096:INFO:Uploading model into container now
2025-03-01 14:56:17,096:INFO:_master_model_container: 13
2025-03-01 14:56:17,096:INFO:_display_container: 2
2025-03-01 14:56:17,096:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-03-01 14:56:17,096:INFO:create_model() successfully completed......................................
2025-03-01 14:56:17,185:INFO:SubProcess create_model() end ==================================
2025-03-01 14:56:17,185:INFO:Creating metrics dataframe
2025-03-01 14:56:17,188:INFO:Initializing Dummy Classifier
2025-03-01 14:56:17,188:INFO:Total runtime is 0.24476771354675297 minutes
2025-03-01 14:56:17,188:INFO:SubProcess create_model() called ==================================
2025-03-01 14:56:17,188:INFO:Initializing create_model()
2025-03-01 14:56:17,188:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002407863EE10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:17,188:INFO:Checking exceptions
2025-03-01 14:56:17,188:INFO:Importing libraries
2025-03-01 14:56:17,188:INFO:Copying training dataset
2025-03-01 14:56:17,196:INFO:Defining folds
2025-03-01 14:56:17,196:INFO:Declaring metric variables
2025-03-01 14:56:17,196:INFO:Importing untrained model
2025-03-01 14:56:17,196:INFO:Dummy Classifier Imported successfully
2025-03-01 14:56:17,196:INFO:Starting cross validation
2025-03-01 14:56:17,196:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-03-01 14:56:17,247:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:56:17,247:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:56:17,247:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:56:17,247:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:56:17,247:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:56:17,247:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:56:17,255:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:56:17,258:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:56:17,265:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:56:17,268:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-03-01 14:56:17,278:INFO:Calculating mean and std
2025-03-01 14:56:17,278:INFO:Creating metrics dataframe
2025-03-01 14:56:17,280:INFO:Uploading results into container
2025-03-01 14:56:17,280:INFO:Uploading model into container now
2025-03-01 14:56:17,281:INFO:_master_model_container: 14
2025-03-01 14:56:17,281:INFO:_display_container: 2
2025-03-01 14:56:17,281:INFO:DummyClassifier(constant=None, random_state=42, strategy='prior')
2025-03-01 14:56:17,281:INFO:create_model() successfully completed......................................
2025-03-01 14:56:17,346:INFO:SubProcess create_model() end ==================================
2025-03-01 14:56:17,346:INFO:Creating metrics dataframe
2025-03-01 14:56:17,356:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:339: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  .applymap(highlight_cols, subset=["TT (Sec)"])

2025-03-01 14:56:17,358:INFO:Initializing create_model()
2025-03-01 14:56:17,358:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:17,358:INFO:Checking exceptions
2025-03-01 14:56:17,358:INFO:Importing libraries
2025-03-01 14:56:17,358:INFO:Copying training dataset
2025-03-01 14:56:17,361:INFO:Defining folds
2025-03-01 14:56:17,361:INFO:Declaring metric variables
2025-03-01 14:56:17,361:INFO:Importing untrained model
2025-03-01 14:56:17,361:INFO:Declaring custom model
2025-03-01 14:56:17,361:INFO:Gradient Boosting Classifier Imported successfully
2025-03-01 14:56:17,365:INFO:Cross validation set to False
2025-03-01 14:56:17,365:INFO:Fitting Model
2025-03-01 14:56:19,687:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-03-01 14:56:19,687:INFO:create_model() successfully completed......................................
2025-03-01 14:56:19,762:INFO:Initializing create_model()
2025-03-01 14:56:19,762:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:19,762:INFO:Checking exceptions
2025-03-01 14:56:19,762:INFO:Importing libraries
2025-03-01 14:56:19,762:INFO:Copying training dataset
2025-03-01 14:56:19,766:INFO:Defining folds
2025-03-01 14:56:19,766:INFO:Declaring metric variables
2025-03-01 14:56:19,766:INFO:Importing untrained model
2025-03-01 14:56:19,766:INFO:Declaring custom model
2025-03-01 14:56:19,770:INFO:Random Forest Classifier Imported successfully
2025-03-01 14:56:19,770:INFO:Cross validation set to False
2025-03-01 14:56:19,770:INFO:Fitting Model
2025-03-01 14:56:19,915:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False)
2025-03-01 14:56:19,915:INFO:create_model() successfully completed......................................
2025-03-01 14:56:19,985:INFO:Initializing create_model()
2025-03-01 14:56:19,985:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:19,985:INFO:Checking exceptions
2025-03-01 14:56:19,985:INFO:Importing libraries
2025-03-01 14:56:19,985:INFO:Copying training dataset
2025-03-01 14:56:19,990:INFO:Defining folds
2025-03-01 14:56:19,990:INFO:Declaring metric variables
2025-03-01 14:56:19,990:INFO:Importing untrained model
2025-03-01 14:56:19,990:INFO:Declaring custom model
2025-03-01 14:56:19,990:INFO:Ada Boost Classifier Imported successfully
2025-03-01 14:56:19,990:INFO:Cross validation set to False
2025-03-01 14:56:19,990:INFO:Fitting Model
2025-03-01 14:56:19,999:WARNING:C:\Users\mfira\AppData\Local\Programs\Python\Python311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-03-01 14:56:20,521:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42)
2025-03-01 14:56:20,521:INFO:create_model() successfully completed......................................
2025-03-01 14:56:20,590:INFO:Initializing create_model()
2025-03-01 14:56:20,590:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:20,590:INFO:Checking exceptions
2025-03-01 14:56:20,595:INFO:Importing libraries
2025-03-01 14:56:20,595:INFO:Copying training dataset
2025-03-01 14:56:20,597:INFO:Defining folds
2025-03-01 14:56:20,597:INFO:Declaring metric variables
2025-03-01 14:56:20,597:INFO:Importing untrained model
2025-03-01 14:56:20,597:INFO:Declaring custom model
2025-03-01 14:56:20,597:INFO:Decision Tree Classifier Imported successfully
2025-03-01 14:56:20,597:INFO:Cross validation set to False
2025-03-01 14:56:20,597:INFO:Fitting Model
2025-03-01 14:56:20,637:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best')
2025-03-01 14:56:20,637:INFO:create_model() successfully completed......................................
2025-03-01 14:56:20,706:INFO:Initializing create_model()
2025-03-01 14:56:20,706:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002406A248C10>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-03-01 14:56:20,706:INFO:Checking exceptions
2025-03-01 14:56:20,706:INFO:Importing libraries
2025-03-01 14:56:20,706:INFO:Copying training dataset
2025-03-01 14:56:20,715:INFO:Defining folds
2025-03-01 14:56:20,716:INFO:Declaring metric variables
2025-03-01 14:56:20,716:INFO:Importing untrained model
2025-03-01 14:56:20,716:INFO:Declaring custom model
2025-03-01 14:56:20,716:INFO:Light Gradient Boosting Machine Imported successfully
2025-03-01 14:56:20,717:INFO:Cross validation set to False
2025-03-01 14:56:20,717:INFO:Fitting Model
2025-03-01 14:56:20,732:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-03-01 14:56:20,732:INFO:[LightGBM] [Info] Number of positive: 2752, number of negative: 2752
2025-03-01 14:56:20,732:INFO:[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000481 seconds.
2025-03-01 14:56:20,732:INFO:You can set `force_col_wise=true` to remove the overhead.
2025-03-01 14:56:20,732:INFO:[LightGBM] [Info] Total Bins 4631
2025-03-01 14:56:20,735:INFO:[LightGBM] [Info] Number of data points in the train set: 5504, number of used features: 20
2025-03-01 14:56:20,735:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.500000 -> initscore=0.000000
2025-03-01 14:56:20,735:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,735:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,735:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,735:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,735:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,740:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,742:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,744:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,745:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,746:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,747:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,748:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,748:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,749:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,749:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,749:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,749:INFO:[LightGBM] [Warning] No further splits with positive gain, best gain: -inf
2025-03-01 14:56:20,798:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-03-01 14:56:20,798:INFO:create_model() successfully completed......................................
2025-03-01 14:56:20,886:INFO:_master_model_container: 14
2025-03-01 14:56:20,886:INFO:_display_container: 2
2025-03-01 14:56:20,886:INFO:[GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42), DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best'), LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)]
2025-03-01 14:56:20,886:INFO:compare_models() successfully completed......................................
2025-03-01 14:56:20,897:INFO:Initializing save_model()
2025-03-01 14:56:20,897:INFO:save_model(model=[GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=42, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=42, verbose=0,
                       warm_start=False), AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=42), DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=42, splitter='best'), LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=42, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)], model_name=models//best_pycaret_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\mfira\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Absolute Magnitude',
                                             'Est Dia in KM(min)',
                                             'Est Dia in KM(max)',
                                             'Relative Velocity km per sec',
                                             'Miss Dist.(Astron...
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-03-01 14:56:20,897:INFO:Adding model into prep_pipe
2025-03-01 14:56:20,939:INFO:models//best_pycaret_model.pkl saved in current working directory
2025-03-01 14:56:20,947:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Absolute Magnitude',
                                             'Est Dia in KM(min)',
                                             'Est Dia in KM(max)',
                                             'Relative Velocity km per sec',
                                             'Miss Dist.(Astronomical)',
                                             'Orbiting Body',
                                             'Orbit Uncertaini...
                  LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                 colsample_bytree=1.0, importance_type='split',
                                 learning_rate=0.1, max_depth=-1,
                                 min_child_samples=20, min_child_weight=0.001,
                                 min_split_gain=0.0, n_estimators=100,
                                 n_jobs=-1, num_leaves=31, objective=None,
                                 random_state=42, reg_alpha=0.0, reg_lambda=0.0,
                                 subsample=1.0, subsample_for_bin=200000,
                                 subsample_freq=0)])],
         verbose=False)
2025-03-01 14:56:20,947:INFO:save_model() successfully completed......................................
